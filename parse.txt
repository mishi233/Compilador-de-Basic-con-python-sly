Grammar:

Rule 0     S' -> program
Rule 1     program -> statement _1_statement_repeat
Rule 2     _1_statement_repeat -> _1_statement_items
Rule 3     _1_statement_repeat -> <empty>
Rule 4     _1_statement_items -> _1_statement_items _1_statement_item
Rule 5     _1_statement_items -> _1_statement_item
Rule 6     _1_statement_item -> statement
Rule 7     statement -> : command
Rule 8     statement -> INTEGER command
Rule 9     command -> DIM array _2_0x2c_array_repeat
Rule 10    _2_0x2c_array_repeat -> _2_0x2c_array_items
Rule 11    _2_0x2c_array_repeat -> <empty>
Rule 12    _2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item
Rule 13    _2_0x2c_array_items -> _2_0x2c_array_item
Rule 14    _2_0x2c_array_item -> , array
Rule 15    command -> READ varItem _3_0x2c_varItem_repeat
Rule 16    _3_0x2c_varItem_repeat -> _3_0x2c_varItem_items
Rule 17    _3_0x2c_varItem_repeat -> <empty>
Rule 18    _3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item
Rule 19    _3_0x2c_varItem_items -> _3_0x2c_varItem_item
Rule 20    _3_0x2c_varItem_item -> , varItem
Rule 21    command -> RETURN
Rule 22    command -> GOSUB INTEGER
Rule 23    command -> DEF FN FN_DIM_NAME ( exprlist ) = expr
Rule 24    command -> INPUT varlist
Rule 25    command -> RESTORE
Rule 26    command -> STOP
Rule 27    command -> REM
Rule 28    command -> END
Rule 29    command -> NEXT IDENT
Rule 30    command -> FOR IDENT = INTEGER TO expr optstep
Rule 31    command -> IF relexpr THEN command
Rule 32    command -> IF relexpr THEN expr
Rule 33    command -> GOTO INTEGER
Rule 34    command -> PRINT plist
Rule 35    command -> DATA plist
Rule 36    command -> LET variable = expr
Rule 37    variable -> array
Rule 38    variable -> IDENT
Rule 39    varlist -> IDENT _4_0x2c_IDENT_repeat
Rule 40    _4_0x2c_IDENT_repeat -> _4_0x2c_IDENT_items
Rule 41    _4_0x2c_IDENT_repeat -> <empty>
Rule 42    _4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item
Rule 43    _4_0x2c_IDENT_items -> _4_0x2c_IDENT_item
Rule 44    _4_0x2c_IDENT_item -> , IDENT
Rule 45    varItem -> IDENT
Rule 46    varItem -> array
Rule 47    array -> IDENT ( arrayItem , arrayItem )
Rule 48    array -> IDENT ( arrayItem )
Rule 49    arrayItem -> INTEGER
Rule 50    arrayItem -> IDENT
Rule 51    expr -> - expr  [precedence=right, level=4]
Rule 52    expr -> ( expr )
Rule 53    expr -> FUNCTIONS ( exprlist )
Rule 54    expr -> variable
Rule 55    expr -> STRING
Rule 56    expr -> FLOAT
Rule 57    expr -> INTEGER
Rule 58    expr -> expr ^ expr  [precedence=left, level=3]
Rule 59    expr -> expr / expr  [precedence=left, level=2]
Rule 60    expr -> expr * expr  [precedence=left, level=2]
Rule 61    expr -> expr - expr  [precedence=left, level=1]
Rule 62    expr -> expr + expr  [precedence=left, level=1]
Rule 63    relexpr -> expr NE expr
Rule 64    relexpr -> expr = expr
Rule 65    relexpr -> expr GE expr
Rule 66    relexpr -> expr GT expr
Rule 67    relexpr -> expr LE expr
Rule 68    relexpr -> expr LT expr
Rule 69    exprlist -> expr _5_0x2c_expr_repeat
Rule 70    _5_0x2c_expr_repeat -> _5_0x2c_expr_items
Rule 71    _5_0x2c_expr_repeat -> <empty>
Rule 72    _5_0x2c_expr_items -> _5_0x2c_expr_items _5_0x2c_expr_item
Rule 73    _5_0x2c_expr_items -> _5_0x2c_expr_item
Rule 74    _5_0x2c_expr_item -> , expr
Rule 75    plist -> expr _6_optend_expr_repeat
Rule 76    _6_optend_expr_repeat -> _6_optend_expr_items
Rule 77    _6_optend_expr_repeat -> <empty>
Rule 78    _6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item
Rule 79    _6_optend_expr_items -> _6_optend_expr_item
Rule 80    _6_optend_expr_item -> optend expr
Rule 81    optend -> ;
Rule 82    optend -> ,
Rule 83    optstep -> empty
Rule 84    optstep -> STEP expr
Rule 85    empty -> <empty>

Terminals, with rules where they appear:

(                    : 23 47 48 52 53
)                    : 23 47 48 52 53
*                    : 60
+                    : 62
,                    : 14 20 44 47 74 82
-                    : 51 61
/                    : 59
:                    : 7
;                    : 81
=                    : 23 30 36 64
DATA                 : 35
DEF                  : 23
DIM                  : 9
END                  : 28
FLOAT                : 56
FN                   : 23
FN_DIM_NAME          : 23
FOR                  : 30
FUNCTIONS            : 53
GE                   : 65
GOSUB                : 22
GOTO                 : 33
GT                   : 66
IDENT                : 29 30 38 39 44 45 47 48 50
IF                   : 31 32
INPUT                : 24
INTEGER              : 8 22 30 33 49 57
LE                   : 67
LET                  : 36
LT                   : 68
NE                   : 63
NEXT                 : 29
PRINT                : 34
READ                 : 15
REM                  : 27
RESTORE              : 25
RETURN               : 21
STEP                 : 84
STOP                 : 26
STRING               : 55
THEN                 : 31 32
TO                   : 30
^                    : 58
error                : 

Nonterminals, with rules where they appear:

_1_statement_item    : 4 5
_1_statement_items   : 2 4
_1_statement_repeat  : 1
_2_0x2c_array_item   : 12 13
_2_0x2c_array_items  : 10 12
_2_0x2c_array_repeat : 9
_3_0x2c_varItem_item : 18 19
_3_0x2c_varItem_items : 16 18
_3_0x2c_varItem_repeat : 15
_4_0x2c_IDENT_item   : 42 43
_4_0x2c_IDENT_items  : 40 42
_4_0x2c_IDENT_repeat : 39
_5_0x2c_expr_item    : 72 73
_5_0x2c_expr_items   : 70 72
_5_0x2c_expr_repeat  : 69
_6_optend_expr_item  : 78 79
_6_optend_expr_items : 76 78
_6_optend_expr_repeat : 75
array                : 9 14 37 46
arrayItem            : 47 47 48
command              : 7 8 31
empty                : 83
expr                 : 23 30 32 36 51 52 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 74 75 80 84
exprlist             : 23 53
optend               : 80
optstep              : 30
plist                : 34 35
program              : 0
relexpr              : 31 32
statement            : 1 6
varItem              : 15 20
variable             : 36 54
varlist              : 24


state 0

    (0) S' -> . program
    (1) program -> . statement _1_statement_repeat
    (7) statement -> . : command
    (8) statement -> . INTEGER command
    :               shift and go to state 3
    INTEGER         shift and go to state 4

    program                        shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> program .


state 2

    (1) program -> statement . _1_statement_repeat
    (2) _1_statement_repeat -> . _1_statement_items
    (3) _1_statement_repeat -> .
    (4) _1_statement_items -> . _1_statement_items _1_statement_item
    (5) _1_statement_items -> . _1_statement_item
    (6) _1_statement_item -> . statement
    (7) statement -> . : command
    (8) statement -> . INTEGER command
    $end            reduce using rule 3 (_1_statement_repeat -> .)
    :               shift and go to state 3
    INTEGER         shift and go to state 4

    statement                      shift and go to state 5
    _1_statement_repeat            shift and go to state 6
    _1_statement_items             shift and go to state 7
    _1_statement_item              shift and go to state 8

state 3

    (7) statement -> : . command
    (9) command -> . DIM array _2_0x2c_array_repeat
    (15) command -> . READ varItem _3_0x2c_varItem_repeat
    (21) command -> . RETURN
    (22) command -> . GOSUB INTEGER
    (23) command -> . DEF FN FN_DIM_NAME ( exprlist ) = expr
    (24) command -> . INPUT varlist
    (25) command -> . RESTORE
    (26) command -> . STOP
    (27) command -> . REM
    (28) command -> . END
    (29) command -> . NEXT IDENT
    (30) command -> . FOR IDENT = INTEGER TO expr optstep
    (31) command -> . IF relexpr THEN command
    (32) command -> . IF relexpr THEN expr
    (33) command -> . GOTO INTEGER
    (34) command -> . PRINT plist
    (35) command -> . DATA plist
    (36) command -> . LET variable = expr
    DIM             shift and go to state 10
    READ            shift and go to state 11
    RETURN          shift and go to state 12
    GOSUB           shift and go to state 13
    DEF             shift and go to state 14
    INPUT           shift and go to state 15
    RESTORE         shift and go to state 16
    STOP            shift and go to state 17
    REM             shift and go to state 18
    END             shift and go to state 19
    NEXT            shift and go to state 20
    FOR             shift and go to state 21
    IF              shift and go to state 22
    GOTO            shift and go to state 23
    PRINT           shift and go to state 24
    DATA            shift and go to state 25
    LET             shift and go to state 26

    command                        shift and go to state 9

state 4

    (8) statement -> INTEGER . command
    (9) command -> . DIM array _2_0x2c_array_repeat
    (15) command -> . READ varItem _3_0x2c_varItem_repeat
    (21) command -> . RETURN
    (22) command -> . GOSUB INTEGER
    (23) command -> . DEF FN FN_DIM_NAME ( exprlist ) = expr
    (24) command -> . INPUT varlist
    (25) command -> . RESTORE
    (26) command -> . STOP
    (27) command -> . REM
    (28) command -> . END
    (29) command -> . NEXT IDENT
    (30) command -> . FOR IDENT = INTEGER TO expr optstep
    (31) command -> . IF relexpr THEN command
    (32) command -> . IF relexpr THEN expr
    (33) command -> . GOTO INTEGER
    (34) command -> . PRINT plist
    (35) command -> . DATA plist
    (36) command -> . LET variable = expr
    DIM             shift and go to state 10
    READ            shift and go to state 11
    RETURN          shift and go to state 12
    GOSUB           shift and go to state 13
    DEF             shift and go to state 14
    INPUT           shift and go to state 15
    RESTORE         shift and go to state 16
    STOP            shift and go to state 17
    REM             shift and go to state 18
    END             shift and go to state 19
    NEXT            shift and go to state 20
    FOR             shift and go to state 21
    IF              shift and go to state 22
    GOTO            shift and go to state 23
    PRINT           shift and go to state 24
    DATA            shift and go to state 25
    LET             shift and go to state 26

    command                        shift and go to state 27

state 5

    (6) _1_statement_item -> statement .
    :               reduce using rule 6 (_1_statement_item -> statement .)
    INTEGER         reduce using rule 6 (_1_statement_item -> statement .)
    $end            reduce using rule 6 (_1_statement_item -> statement .)


state 6

    (1) program -> statement _1_statement_repeat .
    $end            reduce using rule 1 (program -> statement _1_statement_repeat .)


state 7

    (2) _1_statement_repeat -> _1_statement_items .
    (4) _1_statement_items -> _1_statement_items . _1_statement_item
    (6) _1_statement_item -> . statement
    (7) statement -> . : command
    (8) statement -> . INTEGER command
    $end            reduce using rule 2 (_1_statement_repeat -> _1_statement_items .)
    :               shift and go to state 3
    INTEGER         shift and go to state 4

    _1_statement_item              shift and go to state 28
    statement                      shift and go to state 5

state 8

    (5) _1_statement_items -> _1_statement_item .
    :               reduce using rule 5 (_1_statement_items -> _1_statement_item .)
    INTEGER         reduce using rule 5 (_1_statement_items -> _1_statement_item .)
    $end            reduce using rule 5 (_1_statement_items -> _1_statement_item .)


state 9

    (7) statement -> : command .
    :               reduce using rule 7 (statement -> : command .)
    INTEGER         reduce using rule 7 (statement -> : command .)
    $end            reduce using rule 7 (statement -> : command .)


state 10

    (9) command -> DIM . array _2_0x2c_array_repeat
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    IDENT           shift and go to state 30

    array                          shift and go to state 29

state 11

    (15) command -> READ . varItem _3_0x2c_varItem_repeat
    (45) varItem -> . IDENT
    (46) varItem -> . array
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    IDENT           shift and go to state 32

    varItem                        shift and go to state 31
    array                          shift and go to state 33

state 12

    (21) command -> RETURN .
    :               reduce using rule 21 (command -> RETURN .)
    INTEGER         reduce using rule 21 (command -> RETURN .)
    $end            reduce using rule 21 (command -> RETURN .)


state 13

    (22) command -> GOSUB . INTEGER
    INTEGER         shift and go to state 34


state 14

    (23) command -> DEF . FN FN_DIM_NAME ( exprlist ) = expr
    FN              shift and go to state 35


state 15

    (24) command -> INPUT . varlist
    (39) varlist -> . IDENT _4_0x2c_IDENT_repeat
    IDENT           shift and go to state 37

    varlist                        shift and go to state 36

state 16

    (25) command -> RESTORE .
    :               reduce using rule 25 (command -> RESTORE .)
    INTEGER         reduce using rule 25 (command -> RESTORE .)
    $end            reduce using rule 25 (command -> RESTORE .)


state 17

    (26) command -> STOP .
    :               reduce using rule 26 (command -> STOP .)
    INTEGER         reduce using rule 26 (command -> STOP .)
    $end            reduce using rule 26 (command -> STOP .)


state 18

    (27) command -> REM .
    :               reduce using rule 27 (command -> REM .)
    INTEGER         reduce using rule 27 (command -> REM .)
    $end            reduce using rule 27 (command -> REM .)


state 19

    (28) command -> END .
    :               reduce using rule 28 (command -> END .)
    INTEGER         reduce using rule 28 (command -> END .)
    $end            reduce using rule 28 (command -> END .)


state 20

    (29) command -> NEXT . IDENT
    IDENT           shift and go to state 38


state 21

    (30) command -> FOR . IDENT = INTEGER TO expr optstep
    IDENT           shift and go to state 39


state 22

    (31) command -> IF . relexpr THEN command
    (32) command -> IF . relexpr THEN expr
    (63) relexpr -> . expr NE expr
    (64) relexpr -> . expr = expr
    (65) relexpr -> . expr GE expr
    (66) relexpr -> . expr GT expr
    (67) relexpr -> . expr LE expr
    (68) relexpr -> . expr LT expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    relexpr                        shift and go to state 40
    expr                           shift and go to state 41
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 23

    (33) command -> GOTO . INTEGER
    INTEGER         shift and go to state 51


state 24

    (34) command -> PRINT . plist
    (75) plist -> . expr _6_optend_expr_repeat
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    plist                          shift and go to state 52
    expr                           shift and go to state 53
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 25

    (35) command -> DATA . plist
    (75) plist -> . expr _6_optend_expr_repeat
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    plist                          shift and go to state 54
    expr                           shift and go to state 53
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 26

    (36) command -> LET . variable = expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    IDENT           shift and go to state 50

    variable                       shift and go to state 55
    array                          shift and go to state 49

state 27

    (8) statement -> INTEGER command .
    :               reduce using rule 8 (statement -> INTEGER command .)
    INTEGER         reduce using rule 8 (statement -> INTEGER command .)
    $end            reduce using rule 8 (statement -> INTEGER command .)


state 28

    (4) _1_statement_items -> _1_statement_items _1_statement_item .
    :               reduce using rule 4 (_1_statement_items -> _1_statement_items _1_statement_item .)
    INTEGER         reduce using rule 4 (_1_statement_items -> _1_statement_items _1_statement_item .)
    $end            reduce using rule 4 (_1_statement_items -> _1_statement_items _1_statement_item .)


state 29

    (9) command -> DIM array . _2_0x2c_array_repeat
    (10) _2_0x2c_array_repeat -> . _2_0x2c_array_items
    (11) _2_0x2c_array_repeat -> .
    (12) _2_0x2c_array_items -> . _2_0x2c_array_items _2_0x2c_array_item
    (13) _2_0x2c_array_items -> . _2_0x2c_array_item
    (14) _2_0x2c_array_item -> . , array
    :               reduce using rule 11 (_2_0x2c_array_repeat -> .)
    INTEGER         reduce using rule 11 (_2_0x2c_array_repeat -> .)
    $end            reduce using rule 11 (_2_0x2c_array_repeat -> .)
    ,               shift and go to state 59

    _2_0x2c_array_repeat           shift and go to state 56
    _2_0x2c_array_items            shift and go to state 57
    _2_0x2c_array_item             shift and go to state 58

state 30

    (47) array -> IDENT . ( arrayItem , arrayItem )
    (48) array -> IDENT . ( arrayItem )
    (               shift and go to state 60


state 31

    (15) command -> READ varItem . _3_0x2c_varItem_repeat
    (16) _3_0x2c_varItem_repeat -> . _3_0x2c_varItem_items
    (17) _3_0x2c_varItem_repeat -> .
    (18) _3_0x2c_varItem_items -> . _3_0x2c_varItem_items _3_0x2c_varItem_item
    (19) _3_0x2c_varItem_items -> . _3_0x2c_varItem_item
    (20) _3_0x2c_varItem_item -> . , varItem
    :               reduce using rule 17 (_3_0x2c_varItem_repeat -> .)
    INTEGER         reduce using rule 17 (_3_0x2c_varItem_repeat -> .)
    $end            reduce using rule 17 (_3_0x2c_varItem_repeat -> .)
    ,               shift and go to state 64

    _3_0x2c_varItem_repeat         shift and go to state 61
    _3_0x2c_varItem_items          shift and go to state 62
    _3_0x2c_varItem_item           shift and go to state 63

state 32

    (45) varItem -> IDENT .
    (47) array -> IDENT . ( arrayItem , arrayItem )
    (48) array -> IDENT . ( arrayItem )
    ,               reduce using rule 45 (varItem -> IDENT .)
    :               reduce using rule 45 (varItem -> IDENT .)
    INTEGER         reduce using rule 45 (varItem -> IDENT .)
    $end            reduce using rule 45 (varItem -> IDENT .)
    (               shift and go to state 60


state 33

    (46) varItem -> array .
    ,               reduce using rule 46 (varItem -> array .)
    :               reduce using rule 46 (varItem -> array .)
    INTEGER         reduce using rule 46 (varItem -> array .)
    $end            reduce using rule 46 (varItem -> array .)


state 34

    (22) command -> GOSUB INTEGER .
    :               reduce using rule 22 (command -> GOSUB INTEGER .)
    INTEGER         reduce using rule 22 (command -> GOSUB INTEGER .)
    $end            reduce using rule 22 (command -> GOSUB INTEGER .)


state 35

    (23) command -> DEF FN . FN_DIM_NAME ( exprlist ) = expr
    FN_DIM_NAME     shift and go to state 65


state 36

    (24) command -> INPUT varlist .
    :               reduce using rule 24 (command -> INPUT varlist .)
    INTEGER         reduce using rule 24 (command -> INPUT varlist .)
    $end            reduce using rule 24 (command -> INPUT varlist .)


state 37

    (39) varlist -> IDENT . _4_0x2c_IDENT_repeat
    (40) _4_0x2c_IDENT_repeat -> . _4_0x2c_IDENT_items
    (41) _4_0x2c_IDENT_repeat -> .
    (42) _4_0x2c_IDENT_items -> . _4_0x2c_IDENT_items _4_0x2c_IDENT_item
    (43) _4_0x2c_IDENT_items -> . _4_0x2c_IDENT_item
    (44) _4_0x2c_IDENT_item -> . , IDENT
    :               reduce using rule 41 (_4_0x2c_IDENT_repeat -> .)
    INTEGER         reduce using rule 41 (_4_0x2c_IDENT_repeat -> .)
    $end            reduce using rule 41 (_4_0x2c_IDENT_repeat -> .)
    ,               shift and go to state 69

    _4_0x2c_IDENT_repeat           shift and go to state 66
    _4_0x2c_IDENT_items            shift and go to state 67
    _4_0x2c_IDENT_item             shift and go to state 68

state 38

    (29) command -> NEXT IDENT .
    :               reduce using rule 29 (command -> NEXT IDENT .)
    INTEGER         reduce using rule 29 (command -> NEXT IDENT .)
    $end            reduce using rule 29 (command -> NEXT IDENT .)


state 39

    (30) command -> FOR IDENT . = INTEGER TO expr optstep
    =               shift and go to state 70


state 40

    (31) command -> IF relexpr . THEN command
    (32) command -> IF relexpr . THEN expr
    THEN            shift and go to state 71


state 41

    (63) relexpr -> expr . NE expr
    (64) relexpr -> expr . = expr
    (65) relexpr -> expr . GE expr
    (66) relexpr -> expr . GT expr
    (67) relexpr -> expr . LE expr
    (68) relexpr -> expr . LT expr
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    NE              shift and go to state 72
    =               shift and go to state 73
    GE              shift and go to state 74
    GT              shift and go to state 75
    LE              shift and go to state 76
    LT              shift and go to state 77
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 42

    (51) expr -> - . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 83
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 43

    (52) expr -> ( . expr )
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 84
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 44

    (53) expr -> FUNCTIONS . ( exprlist )
    (               shift and go to state 85


state 45

    (54) expr -> variable .
    NE              reduce using rule 54 (expr -> variable .)
    =               reduce using rule 54 (expr -> variable .)
    GE              reduce using rule 54 (expr -> variable .)
    GT              reduce using rule 54 (expr -> variable .)
    LE              reduce using rule 54 (expr -> variable .)
    LT              reduce using rule 54 (expr -> variable .)
    ^               reduce using rule 54 (expr -> variable .)
    /               reduce using rule 54 (expr -> variable .)
    *               reduce using rule 54 (expr -> variable .)
    -               reduce using rule 54 (expr -> variable .)
    +               reduce using rule 54 (expr -> variable .)
    ;               reduce using rule 54 (expr -> variable .)
    ,               reduce using rule 54 (expr -> variable .)
    :               reduce using rule 54 (expr -> variable .)
    INTEGER         reduce using rule 54 (expr -> variable .)
    $end            reduce using rule 54 (expr -> variable .)
    )               reduce using rule 54 (expr -> variable .)
    THEN            reduce using rule 54 (expr -> variable .)
    STEP            reduce using rule 54 (expr -> variable .)


state 46

    (55) expr -> STRING .
    NE              reduce using rule 55 (expr -> STRING .)
    =               reduce using rule 55 (expr -> STRING .)
    GE              reduce using rule 55 (expr -> STRING .)
    GT              reduce using rule 55 (expr -> STRING .)
    LE              reduce using rule 55 (expr -> STRING .)
    LT              reduce using rule 55 (expr -> STRING .)
    ^               reduce using rule 55 (expr -> STRING .)
    /               reduce using rule 55 (expr -> STRING .)
    *               reduce using rule 55 (expr -> STRING .)
    -               reduce using rule 55 (expr -> STRING .)
    +               reduce using rule 55 (expr -> STRING .)
    ;               reduce using rule 55 (expr -> STRING .)
    ,               reduce using rule 55 (expr -> STRING .)
    :               reduce using rule 55 (expr -> STRING .)
    INTEGER         reduce using rule 55 (expr -> STRING .)
    $end            reduce using rule 55 (expr -> STRING .)
    )               reduce using rule 55 (expr -> STRING .)
    THEN            reduce using rule 55 (expr -> STRING .)
    STEP            reduce using rule 55 (expr -> STRING .)


state 47

    (56) expr -> FLOAT .
    NE              reduce using rule 56 (expr -> FLOAT .)
    =               reduce using rule 56 (expr -> FLOAT .)
    GE              reduce using rule 56 (expr -> FLOAT .)
    GT              reduce using rule 56 (expr -> FLOAT .)
    LE              reduce using rule 56 (expr -> FLOAT .)
    LT              reduce using rule 56 (expr -> FLOAT .)
    ^               reduce using rule 56 (expr -> FLOAT .)
    /               reduce using rule 56 (expr -> FLOAT .)
    *               reduce using rule 56 (expr -> FLOAT .)
    -               reduce using rule 56 (expr -> FLOAT .)
    +               reduce using rule 56 (expr -> FLOAT .)
    ;               reduce using rule 56 (expr -> FLOAT .)
    ,               reduce using rule 56 (expr -> FLOAT .)
    :               reduce using rule 56 (expr -> FLOAT .)
    INTEGER         reduce using rule 56 (expr -> FLOAT .)
    $end            reduce using rule 56 (expr -> FLOAT .)
    )               reduce using rule 56 (expr -> FLOAT .)
    THEN            reduce using rule 56 (expr -> FLOAT .)
    STEP            reduce using rule 56 (expr -> FLOAT .)


state 48

    (57) expr -> INTEGER .
    NE              reduce using rule 57 (expr -> INTEGER .)
    =               reduce using rule 57 (expr -> INTEGER .)
    GE              reduce using rule 57 (expr -> INTEGER .)
    GT              reduce using rule 57 (expr -> INTEGER .)
    LE              reduce using rule 57 (expr -> INTEGER .)
    LT              reduce using rule 57 (expr -> INTEGER .)
    ^               reduce using rule 57 (expr -> INTEGER .)
    /               reduce using rule 57 (expr -> INTEGER .)
    *               reduce using rule 57 (expr -> INTEGER .)
    -               reduce using rule 57 (expr -> INTEGER .)
    +               reduce using rule 57 (expr -> INTEGER .)
    ;               reduce using rule 57 (expr -> INTEGER .)
    ,               reduce using rule 57 (expr -> INTEGER .)
    :               reduce using rule 57 (expr -> INTEGER .)
    INTEGER         reduce using rule 57 (expr -> INTEGER .)
    $end            reduce using rule 57 (expr -> INTEGER .)
    )               reduce using rule 57 (expr -> INTEGER .)
    THEN            reduce using rule 57 (expr -> INTEGER .)
    STEP            reduce using rule 57 (expr -> INTEGER .)


state 49

    (37) variable -> array .
    NE              reduce using rule 37 (variable -> array .)
    =               reduce using rule 37 (variable -> array .)
    GE              reduce using rule 37 (variable -> array .)
    GT              reduce using rule 37 (variable -> array .)
    LE              reduce using rule 37 (variable -> array .)
    LT              reduce using rule 37 (variable -> array .)
    ^               reduce using rule 37 (variable -> array .)
    /               reduce using rule 37 (variable -> array .)
    *               reduce using rule 37 (variable -> array .)
    -               reduce using rule 37 (variable -> array .)
    +               reduce using rule 37 (variable -> array .)
    ;               reduce using rule 37 (variable -> array .)
    ,               reduce using rule 37 (variable -> array .)
    :               reduce using rule 37 (variable -> array .)
    INTEGER         reduce using rule 37 (variable -> array .)
    $end            reduce using rule 37 (variable -> array .)
    )               reduce using rule 37 (variable -> array .)
    THEN            reduce using rule 37 (variable -> array .)
    STEP            reduce using rule 37 (variable -> array .)


state 50

    (38) variable -> IDENT .
    (47) array -> IDENT . ( arrayItem , arrayItem )
    (48) array -> IDENT . ( arrayItem )
    NE              reduce using rule 38 (variable -> IDENT .)
    =               reduce using rule 38 (variable -> IDENT .)
    GE              reduce using rule 38 (variable -> IDENT .)
    GT              reduce using rule 38 (variable -> IDENT .)
    LE              reduce using rule 38 (variable -> IDENT .)
    LT              reduce using rule 38 (variable -> IDENT .)
    ^               reduce using rule 38 (variable -> IDENT .)
    /               reduce using rule 38 (variable -> IDENT .)
    *               reduce using rule 38 (variable -> IDENT .)
    -               reduce using rule 38 (variable -> IDENT .)
    +               reduce using rule 38 (variable -> IDENT .)
    ;               reduce using rule 38 (variable -> IDENT .)
    ,               reduce using rule 38 (variable -> IDENT .)
    :               reduce using rule 38 (variable -> IDENT .)
    INTEGER         reduce using rule 38 (variable -> IDENT .)
    $end            reduce using rule 38 (variable -> IDENT .)
    )               reduce using rule 38 (variable -> IDENT .)
    THEN            reduce using rule 38 (variable -> IDENT .)
    STEP            reduce using rule 38 (variable -> IDENT .)
    (               shift and go to state 60


state 51

    (33) command -> GOTO INTEGER .
    :               reduce using rule 33 (command -> GOTO INTEGER .)
    INTEGER         reduce using rule 33 (command -> GOTO INTEGER .)
    $end            reduce using rule 33 (command -> GOTO INTEGER .)


state 52

    (34) command -> PRINT plist .
    :               reduce using rule 34 (command -> PRINT plist .)
    INTEGER         reduce using rule 34 (command -> PRINT plist .)
    $end            reduce using rule 34 (command -> PRINT plist .)


state 53

    (75) plist -> expr . _6_optend_expr_repeat
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (76) _6_optend_expr_repeat -> . _6_optend_expr_items
    (77) _6_optend_expr_repeat -> .
    (78) _6_optend_expr_items -> . _6_optend_expr_items _6_optend_expr_item
    (79) _6_optend_expr_items -> . _6_optend_expr_item
    (80) _6_optend_expr_item -> . optend expr
    (81) optend -> . ;
    (82) optend -> . ,
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82
    :               reduce using rule 77 (_6_optend_expr_repeat -> .)
    INTEGER         reduce using rule 77 (_6_optend_expr_repeat -> .)
    $end            reduce using rule 77 (_6_optend_expr_repeat -> .)
    ;               shift and go to state 90
    ,               shift and go to state 91

    _6_optend_expr_repeat          shift and go to state 86
    _6_optend_expr_items           shift and go to state 87
    _6_optend_expr_item            shift and go to state 88
    optend                         shift and go to state 89

state 54

    (35) command -> DATA plist .
    :               reduce using rule 35 (command -> DATA plist .)
    INTEGER         reduce using rule 35 (command -> DATA plist .)
    $end            reduce using rule 35 (command -> DATA plist .)


state 55

    (36) command -> LET variable . = expr
    =               shift and go to state 92


state 56

    (9) command -> DIM array _2_0x2c_array_repeat .
    :               reduce using rule 9 (command -> DIM array _2_0x2c_array_repeat .)
    INTEGER         reduce using rule 9 (command -> DIM array _2_0x2c_array_repeat .)
    $end            reduce using rule 9 (command -> DIM array _2_0x2c_array_repeat .)


state 57

    (10) _2_0x2c_array_repeat -> _2_0x2c_array_items .
    (12) _2_0x2c_array_items -> _2_0x2c_array_items . _2_0x2c_array_item
    (14) _2_0x2c_array_item -> . , array
    :               reduce using rule 10 (_2_0x2c_array_repeat -> _2_0x2c_array_items .)
    INTEGER         reduce using rule 10 (_2_0x2c_array_repeat -> _2_0x2c_array_items .)
    $end            reduce using rule 10 (_2_0x2c_array_repeat -> _2_0x2c_array_items .)
    ,               shift and go to state 59

    _2_0x2c_array_item             shift and go to state 93

state 58

    (13) _2_0x2c_array_items -> _2_0x2c_array_item .
    ,               reduce using rule 13 (_2_0x2c_array_items -> _2_0x2c_array_item .)
    :               reduce using rule 13 (_2_0x2c_array_items -> _2_0x2c_array_item .)
    INTEGER         reduce using rule 13 (_2_0x2c_array_items -> _2_0x2c_array_item .)
    $end            reduce using rule 13 (_2_0x2c_array_items -> _2_0x2c_array_item .)


state 59

    (14) _2_0x2c_array_item -> , . array
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    IDENT           shift and go to state 30

    array                          shift and go to state 94

state 60

    (47) array -> IDENT ( . arrayItem , arrayItem )
    (48) array -> IDENT ( . arrayItem )
    (49) arrayItem -> . INTEGER
    (50) arrayItem -> . IDENT
    INTEGER         shift and go to state 97
    IDENT           shift and go to state 95

    arrayItem                      shift and go to state 96

state 61

    (15) command -> READ varItem _3_0x2c_varItem_repeat .
    :               reduce using rule 15 (command -> READ varItem _3_0x2c_varItem_repeat .)
    INTEGER         reduce using rule 15 (command -> READ varItem _3_0x2c_varItem_repeat .)
    $end            reduce using rule 15 (command -> READ varItem _3_0x2c_varItem_repeat .)


state 62

    (16) _3_0x2c_varItem_repeat -> _3_0x2c_varItem_items .
    (18) _3_0x2c_varItem_items -> _3_0x2c_varItem_items . _3_0x2c_varItem_item
    (20) _3_0x2c_varItem_item -> . , varItem
    :               reduce using rule 16 (_3_0x2c_varItem_repeat -> _3_0x2c_varItem_items .)
    INTEGER         reduce using rule 16 (_3_0x2c_varItem_repeat -> _3_0x2c_varItem_items .)
    $end            reduce using rule 16 (_3_0x2c_varItem_repeat -> _3_0x2c_varItem_items .)
    ,               shift and go to state 64

    _3_0x2c_varItem_item           shift and go to state 98

state 63

    (19) _3_0x2c_varItem_items -> _3_0x2c_varItem_item .
    ,               reduce using rule 19 (_3_0x2c_varItem_items -> _3_0x2c_varItem_item .)
    :               reduce using rule 19 (_3_0x2c_varItem_items -> _3_0x2c_varItem_item .)
    INTEGER         reduce using rule 19 (_3_0x2c_varItem_items -> _3_0x2c_varItem_item .)
    $end            reduce using rule 19 (_3_0x2c_varItem_items -> _3_0x2c_varItem_item .)


state 64

    (20) _3_0x2c_varItem_item -> , . varItem
    (45) varItem -> . IDENT
    (46) varItem -> . array
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    IDENT           shift and go to state 32

    varItem                        shift and go to state 99
    array                          shift and go to state 33

state 65

    (23) command -> DEF FN FN_DIM_NAME . ( exprlist ) = expr
    (               shift and go to state 100


state 66

    (39) varlist -> IDENT _4_0x2c_IDENT_repeat .
    :               reduce using rule 39 (varlist -> IDENT _4_0x2c_IDENT_repeat .)
    INTEGER         reduce using rule 39 (varlist -> IDENT _4_0x2c_IDENT_repeat .)
    $end            reduce using rule 39 (varlist -> IDENT _4_0x2c_IDENT_repeat .)


state 67

    (40) _4_0x2c_IDENT_repeat -> _4_0x2c_IDENT_items .
    (42) _4_0x2c_IDENT_items -> _4_0x2c_IDENT_items . _4_0x2c_IDENT_item
    (44) _4_0x2c_IDENT_item -> . , IDENT
    :               reduce using rule 40 (_4_0x2c_IDENT_repeat -> _4_0x2c_IDENT_items .)
    INTEGER         reduce using rule 40 (_4_0x2c_IDENT_repeat -> _4_0x2c_IDENT_items .)
    $end            reduce using rule 40 (_4_0x2c_IDENT_repeat -> _4_0x2c_IDENT_items .)
    ,               shift and go to state 69

    _4_0x2c_IDENT_item             shift and go to state 101

state 68

    (43) _4_0x2c_IDENT_items -> _4_0x2c_IDENT_item .
    ,               reduce using rule 43 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_item .)
    :               reduce using rule 43 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_item .)
    INTEGER         reduce using rule 43 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_item .)
    $end            reduce using rule 43 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_item .)


state 69

    (44) _4_0x2c_IDENT_item -> , . IDENT
    IDENT           shift and go to state 102


state 70

    (30) command -> FOR IDENT = . INTEGER TO expr optstep
    INTEGER         shift and go to state 103


state 71

    (31) command -> IF relexpr THEN . command
    (32) command -> IF relexpr THEN . expr
    (9) command -> . DIM array _2_0x2c_array_repeat
    (15) command -> . READ varItem _3_0x2c_varItem_repeat
    (21) command -> . RETURN
    (22) command -> . GOSUB INTEGER
    (23) command -> . DEF FN FN_DIM_NAME ( exprlist ) = expr
    (24) command -> . INPUT varlist
    (25) command -> . RESTORE
    (26) command -> . STOP
    (27) command -> . REM
    (28) command -> . END
    (29) command -> . NEXT IDENT
    (30) command -> . FOR IDENT = INTEGER TO expr optstep
    (31) command -> . IF relexpr THEN command
    (32) command -> . IF relexpr THEN expr
    (33) command -> . GOTO INTEGER
    (34) command -> . PRINT plist
    (35) command -> . DATA plist
    (36) command -> . LET variable = expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    DIM             shift and go to state 10
    READ            shift and go to state 11
    RETURN          shift and go to state 12
    GOSUB           shift and go to state 13
    DEF             shift and go to state 14
    INPUT           shift and go to state 15
    RESTORE         shift and go to state 16
    STOP            shift and go to state 17
    REM             shift and go to state 18
    END             shift and go to state 19
    NEXT            shift and go to state 20
    FOR             shift and go to state 21
    IF              shift and go to state 22
    GOTO            shift and go to state 23
    PRINT           shift and go to state 24
    DATA            shift and go to state 25
    LET             shift and go to state 26
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    command                        shift and go to state 104
    expr                           shift and go to state 105
    array                          shift and go to state 49
    variable                       shift and go to state 45

state 72

    (63) relexpr -> expr NE . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 106
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 73

    (64) relexpr -> expr = . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 107
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 74

    (65) relexpr -> expr GE . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 108
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 75

    (66) relexpr -> expr GT . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 109
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 76

    (67) relexpr -> expr LE . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 110
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 77

    (68) relexpr -> expr LT . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 111
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 78

    (58) expr -> expr ^ . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 112
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 79

    (59) expr -> expr / . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 113
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 80

    (60) expr -> expr * . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 114
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 81

    (61) expr -> expr - . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 115
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 82

    (62) expr -> expr + . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 116
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 83

    (51) expr -> - expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    NE              reduce using rule 51 (expr -> - expr .)
    =               reduce using rule 51 (expr -> - expr .)
    GE              reduce using rule 51 (expr -> - expr .)
    GT              reduce using rule 51 (expr -> - expr .)
    LE              reduce using rule 51 (expr -> - expr .)
    LT              reduce using rule 51 (expr -> - expr .)
    ^               reduce using rule 51 (expr -> - expr .)
    /               reduce using rule 51 (expr -> - expr .)
    *               reduce using rule 51 (expr -> - expr .)
    -               reduce using rule 51 (expr -> - expr .)
    +               reduce using rule 51 (expr -> - expr .)
    ;               reduce using rule 51 (expr -> - expr .)
    ,               reduce using rule 51 (expr -> - expr .)
    :               reduce using rule 51 (expr -> - expr .)
    INTEGER         reduce using rule 51 (expr -> - expr .)
    $end            reduce using rule 51 (expr -> - expr .)
    )               reduce using rule 51 (expr -> - expr .)
    THEN            reduce using rule 51 (expr -> - expr .)
    STEP            reduce using rule 51 (expr -> - expr .)


state 84

    (52) expr -> ( expr . )
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    )               shift and go to state 117
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 85

    (53) expr -> FUNCTIONS ( . exprlist )
    (69) exprlist -> . expr _5_0x2c_expr_repeat
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    exprlist                       shift and go to state 118
    expr                           shift and go to state 119
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 86

    (75) plist -> expr _6_optend_expr_repeat .
    :               reduce using rule 75 (plist -> expr _6_optend_expr_repeat .)
    INTEGER         reduce using rule 75 (plist -> expr _6_optend_expr_repeat .)
    $end            reduce using rule 75 (plist -> expr _6_optend_expr_repeat .)


state 87

    (76) _6_optend_expr_repeat -> _6_optend_expr_items .
    (78) _6_optend_expr_items -> _6_optend_expr_items . _6_optend_expr_item
    (80) _6_optend_expr_item -> . optend expr
    (81) optend -> . ;
    (82) optend -> . ,
    :               reduce using rule 76 (_6_optend_expr_repeat -> _6_optend_expr_items .)
    INTEGER         reduce using rule 76 (_6_optend_expr_repeat -> _6_optend_expr_items .)
    $end            reduce using rule 76 (_6_optend_expr_repeat -> _6_optend_expr_items .)
    ;               shift and go to state 90
    ,               shift and go to state 91

    _6_optend_expr_item            shift and go to state 120
    optend                         shift and go to state 89

state 88

    (79) _6_optend_expr_items -> _6_optend_expr_item .
    ;               reduce using rule 79 (_6_optend_expr_items -> _6_optend_expr_item .)
    ,               reduce using rule 79 (_6_optend_expr_items -> _6_optend_expr_item .)
    :               reduce using rule 79 (_6_optend_expr_items -> _6_optend_expr_item .)
    INTEGER         reduce using rule 79 (_6_optend_expr_items -> _6_optend_expr_item .)
    $end            reduce using rule 79 (_6_optend_expr_items -> _6_optend_expr_item .)


state 89

    (80) _6_optend_expr_item -> optend . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 121
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 90

    (81) optend -> ; .
    -               reduce using rule 81 (optend -> ; .)
    (               reduce using rule 81 (optend -> ; .)
    FUNCTIONS       reduce using rule 81 (optend -> ; .)
    STRING          reduce using rule 81 (optend -> ; .)
    FLOAT           reduce using rule 81 (optend -> ; .)
    INTEGER         reduce using rule 81 (optend -> ; .)
    IDENT           reduce using rule 81 (optend -> ; .)


state 91

    (82) optend -> , .
    -               reduce using rule 82 (optend -> , .)
    (               reduce using rule 82 (optend -> , .)
    FUNCTIONS       reduce using rule 82 (optend -> , .)
    STRING          reduce using rule 82 (optend -> , .)
    FLOAT           reduce using rule 82 (optend -> , .)
    INTEGER         reduce using rule 82 (optend -> , .)
    IDENT           reduce using rule 82 (optend -> , .)


state 92

    (36) command -> LET variable = . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    variable                       shift and go to state 45
    expr                           shift and go to state 122
    array                          shift and go to state 49

state 93

    (12) _2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item .
    ,               reduce using rule 12 (_2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item .)
    :               reduce using rule 12 (_2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item .)
    INTEGER         reduce using rule 12 (_2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item .)
    $end            reduce using rule 12 (_2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item .)


state 94

    (14) _2_0x2c_array_item -> , array .
    ,               reduce using rule 14 (_2_0x2c_array_item -> , array .)
    :               reduce using rule 14 (_2_0x2c_array_item -> , array .)
    INTEGER         reduce using rule 14 (_2_0x2c_array_item -> , array .)
    $end            reduce using rule 14 (_2_0x2c_array_item -> , array .)


state 95

    (50) arrayItem -> IDENT .
    ,               reduce using rule 50 (arrayItem -> IDENT .)
    )               reduce using rule 50 (arrayItem -> IDENT .)


state 96

    (47) array -> IDENT ( arrayItem . , arrayItem )
    (48) array -> IDENT ( arrayItem . )
    ,               shift and go to state 123
    )               shift and go to state 124


state 97

    (49) arrayItem -> INTEGER .
    ,               reduce using rule 49 (arrayItem -> INTEGER .)
    )               reduce using rule 49 (arrayItem -> INTEGER .)


state 98

    (18) _3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item .
    ,               reduce using rule 18 (_3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item .)
    :               reduce using rule 18 (_3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item .)
    INTEGER         reduce using rule 18 (_3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item .)
    $end            reduce using rule 18 (_3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item .)


state 99

    (20) _3_0x2c_varItem_item -> , varItem .
    ,               reduce using rule 20 (_3_0x2c_varItem_item -> , varItem .)
    :               reduce using rule 20 (_3_0x2c_varItem_item -> , varItem .)
    INTEGER         reduce using rule 20 (_3_0x2c_varItem_item -> , varItem .)
    $end            reduce using rule 20 (_3_0x2c_varItem_item -> , varItem .)


state 100

    (23) command -> DEF FN FN_DIM_NAME ( . exprlist ) = expr
    (69) exprlist -> . expr _5_0x2c_expr_repeat
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    exprlist                       shift and go to state 125
    expr                           shift and go to state 119
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 101

    (42) _4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item .
    ,               reduce using rule 42 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item .)
    :               reduce using rule 42 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item .)
    INTEGER         reduce using rule 42 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item .)
    $end            reduce using rule 42 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item .)


state 102

    (44) _4_0x2c_IDENT_item -> , IDENT .
    ,               reduce using rule 44 (_4_0x2c_IDENT_item -> , IDENT .)
    :               reduce using rule 44 (_4_0x2c_IDENT_item -> , IDENT .)
    INTEGER         reduce using rule 44 (_4_0x2c_IDENT_item -> , IDENT .)
    $end            reduce using rule 44 (_4_0x2c_IDENT_item -> , IDENT .)


state 103

    (30) command -> FOR IDENT = INTEGER . TO expr optstep
    TO              shift and go to state 126


state 104

    (31) command -> IF relexpr THEN command .
    :               reduce using rule 31 (command -> IF relexpr THEN command .)
    INTEGER         reduce using rule 31 (command -> IF relexpr THEN command .)
    $end            reduce using rule 31 (command -> IF relexpr THEN command .)


state 105

    (32) command -> IF relexpr THEN expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    :               reduce using rule 32 (command -> IF relexpr THEN expr .)
    INTEGER         reduce using rule 32 (command -> IF relexpr THEN expr .)
    $end            reduce using rule 32 (command -> IF relexpr THEN expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 106

    (63) relexpr -> expr NE expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    THEN            reduce using rule 63 (relexpr -> expr NE expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 107

    (64) relexpr -> expr = expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    THEN            reduce using rule 64 (relexpr -> expr = expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 108

    (65) relexpr -> expr GE expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    THEN            reduce using rule 65 (relexpr -> expr GE expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 109

    (66) relexpr -> expr GT expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    THEN            reduce using rule 66 (relexpr -> expr GT expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 110

    (67) relexpr -> expr LE expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    THEN            reduce using rule 67 (relexpr -> expr LE expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 111

    (68) relexpr -> expr LT expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    THEN            reduce using rule 68 (relexpr -> expr LT expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 112

    (58) expr -> expr ^ expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    NE              reduce using rule 58 (expr -> expr ^ expr .)
    =               reduce using rule 58 (expr -> expr ^ expr .)
    GE              reduce using rule 58 (expr -> expr ^ expr .)
    GT              reduce using rule 58 (expr -> expr ^ expr .)
    LE              reduce using rule 58 (expr -> expr ^ expr .)
    LT              reduce using rule 58 (expr -> expr ^ expr .)
    ^               reduce using rule 58 (expr -> expr ^ expr .)
    /               reduce using rule 58 (expr -> expr ^ expr .)
    *               reduce using rule 58 (expr -> expr ^ expr .)
    -               reduce using rule 58 (expr -> expr ^ expr .)
    +               reduce using rule 58 (expr -> expr ^ expr .)
    ;               reduce using rule 58 (expr -> expr ^ expr .)
    ,               reduce using rule 58 (expr -> expr ^ expr .)
    :               reduce using rule 58 (expr -> expr ^ expr .)
    INTEGER         reduce using rule 58 (expr -> expr ^ expr .)
    $end            reduce using rule 58 (expr -> expr ^ expr .)
    )               reduce using rule 58 (expr -> expr ^ expr .)
    THEN            reduce using rule 58 (expr -> expr ^ expr .)
    STEP            reduce using rule 58 (expr -> expr ^ expr .)


state 113

    (59) expr -> expr / expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    NE              reduce using rule 59 (expr -> expr / expr .)
    =               reduce using rule 59 (expr -> expr / expr .)
    GE              reduce using rule 59 (expr -> expr / expr .)
    GT              reduce using rule 59 (expr -> expr / expr .)
    LE              reduce using rule 59 (expr -> expr / expr .)
    LT              reduce using rule 59 (expr -> expr / expr .)
    /               reduce using rule 59 (expr -> expr / expr .)
    *               reduce using rule 59 (expr -> expr / expr .)
    -               reduce using rule 59 (expr -> expr / expr .)
    +               reduce using rule 59 (expr -> expr / expr .)
    ;               reduce using rule 59 (expr -> expr / expr .)
    ,               reduce using rule 59 (expr -> expr / expr .)
    :               reduce using rule 59 (expr -> expr / expr .)
    INTEGER         reduce using rule 59 (expr -> expr / expr .)
    $end            reduce using rule 59 (expr -> expr / expr .)
    )               reduce using rule 59 (expr -> expr / expr .)
    THEN            reduce using rule 59 (expr -> expr / expr .)
    STEP            reduce using rule 59 (expr -> expr / expr .)
    ^               shift and go to state 78


state 114

    (60) expr -> expr * expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    NE              reduce using rule 60 (expr -> expr * expr .)
    =               reduce using rule 60 (expr -> expr * expr .)
    GE              reduce using rule 60 (expr -> expr * expr .)
    GT              reduce using rule 60 (expr -> expr * expr .)
    LE              reduce using rule 60 (expr -> expr * expr .)
    LT              reduce using rule 60 (expr -> expr * expr .)
    /               reduce using rule 60 (expr -> expr * expr .)
    *               reduce using rule 60 (expr -> expr * expr .)
    -               reduce using rule 60 (expr -> expr * expr .)
    +               reduce using rule 60 (expr -> expr * expr .)
    ;               reduce using rule 60 (expr -> expr * expr .)
    ,               reduce using rule 60 (expr -> expr * expr .)
    :               reduce using rule 60 (expr -> expr * expr .)
    INTEGER         reduce using rule 60 (expr -> expr * expr .)
    $end            reduce using rule 60 (expr -> expr * expr .)
    )               reduce using rule 60 (expr -> expr * expr .)
    THEN            reduce using rule 60 (expr -> expr * expr .)
    STEP            reduce using rule 60 (expr -> expr * expr .)
    ^               shift and go to state 78


state 115

    (61) expr -> expr - expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    NE              reduce using rule 61 (expr -> expr - expr .)
    =               reduce using rule 61 (expr -> expr - expr .)
    GE              reduce using rule 61 (expr -> expr - expr .)
    GT              reduce using rule 61 (expr -> expr - expr .)
    LE              reduce using rule 61 (expr -> expr - expr .)
    LT              reduce using rule 61 (expr -> expr - expr .)
    -               reduce using rule 61 (expr -> expr - expr .)
    +               reduce using rule 61 (expr -> expr - expr .)
    ;               reduce using rule 61 (expr -> expr - expr .)
    ,               reduce using rule 61 (expr -> expr - expr .)
    :               reduce using rule 61 (expr -> expr - expr .)
    INTEGER         reduce using rule 61 (expr -> expr - expr .)
    $end            reduce using rule 61 (expr -> expr - expr .)
    )               reduce using rule 61 (expr -> expr - expr .)
    THEN            reduce using rule 61 (expr -> expr - expr .)
    STEP            reduce using rule 61 (expr -> expr - expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80


state 116

    (62) expr -> expr + expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    NE              reduce using rule 62 (expr -> expr + expr .)
    =               reduce using rule 62 (expr -> expr + expr .)
    GE              reduce using rule 62 (expr -> expr + expr .)
    GT              reduce using rule 62 (expr -> expr + expr .)
    LE              reduce using rule 62 (expr -> expr + expr .)
    LT              reduce using rule 62 (expr -> expr + expr .)
    -               reduce using rule 62 (expr -> expr + expr .)
    +               reduce using rule 62 (expr -> expr + expr .)
    ;               reduce using rule 62 (expr -> expr + expr .)
    ,               reduce using rule 62 (expr -> expr + expr .)
    :               reduce using rule 62 (expr -> expr + expr .)
    INTEGER         reduce using rule 62 (expr -> expr + expr .)
    $end            reduce using rule 62 (expr -> expr + expr .)
    )               reduce using rule 62 (expr -> expr + expr .)
    THEN            reduce using rule 62 (expr -> expr + expr .)
    STEP            reduce using rule 62 (expr -> expr + expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80


state 117

    (52) expr -> ( expr ) .
    NE              reduce using rule 52 (expr -> ( expr ) .)
    =               reduce using rule 52 (expr -> ( expr ) .)
    GE              reduce using rule 52 (expr -> ( expr ) .)
    GT              reduce using rule 52 (expr -> ( expr ) .)
    LE              reduce using rule 52 (expr -> ( expr ) .)
    LT              reduce using rule 52 (expr -> ( expr ) .)
    ^               reduce using rule 52 (expr -> ( expr ) .)
    /               reduce using rule 52 (expr -> ( expr ) .)
    *               reduce using rule 52 (expr -> ( expr ) .)
    -               reduce using rule 52 (expr -> ( expr ) .)
    +               reduce using rule 52 (expr -> ( expr ) .)
    ;               reduce using rule 52 (expr -> ( expr ) .)
    ,               reduce using rule 52 (expr -> ( expr ) .)
    :               reduce using rule 52 (expr -> ( expr ) .)
    INTEGER         reduce using rule 52 (expr -> ( expr ) .)
    $end            reduce using rule 52 (expr -> ( expr ) .)
    )               reduce using rule 52 (expr -> ( expr ) .)
    THEN            reduce using rule 52 (expr -> ( expr ) .)
    STEP            reduce using rule 52 (expr -> ( expr ) .)


state 118

    (53) expr -> FUNCTIONS ( exprlist . )
    )               shift and go to state 127


state 119

    (69) exprlist -> expr . _5_0x2c_expr_repeat
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (70) _5_0x2c_expr_repeat -> . _5_0x2c_expr_items
    (71) _5_0x2c_expr_repeat -> .
    (72) _5_0x2c_expr_items -> . _5_0x2c_expr_items _5_0x2c_expr_item
    (73) _5_0x2c_expr_items -> . _5_0x2c_expr_item
    (74) _5_0x2c_expr_item -> . , expr
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82
    )               reduce using rule 71 (_5_0x2c_expr_repeat -> .)
    ,               shift and go to state 131

    _5_0x2c_expr_repeat            shift and go to state 128
    _5_0x2c_expr_items             shift and go to state 129
    _5_0x2c_expr_item              shift and go to state 130

state 120

    (78) _6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .
    ;               reduce using rule 78 (_6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .)
    ,               reduce using rule 78 (_6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .)
    :               reduce using rule 78 (_6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .)
    INTEGER         reduce using rule 78 (_6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .)
    $end            reduce using rule 78 (_6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .)


state 121

    (80) _6_optend_expr_item -> optend expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    ;               reduce using rule 80 (_6_optend_expr_item -> optend expr .)
    ,               reduce using rule 80 (_6_optend_expr_item -> optend expr .)
    :               reduce using rule 80 (_6_optend_expr_item -> optend expr .)
    INTEGER         reduce using rule 80 (_6_optend_expr_item -> optend expr .)
    $end            reduce using rule 80 (_6_optend_expr_item -> optend expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 122

    (36) command -> LET variable = expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    :               reduce using rule 36 (command -> LET variable = expr .)
    INTEGER         reduce using rule 36 (command -> LET variable = expr .)
    $end            reduce using rule 36 (command -> LET variable = expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 123

    (47) array -> IDENT ( arrayItem , . arrayItem )
    (49) arrayItem -> . INTEGER
    (50) arrayItem -> . IDENT
    INTEGER         shift and go to state 97
    IDENT           shift and go to state 95

    arrayItem                      shift and go to state 132

state 124

    (48) array -> IDENT ( arrayItem ) .
    ,               reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    :               reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    INTEGER         reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    $end            reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    NE              reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    =               reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    GE              reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    GT              reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    LE              reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    LT              reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    ^               reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    /               reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    *               reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    -               reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    +               reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    ;               reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    )               reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    THEN            reduce using rule 48 (array -> IDENT ( arrayItem ) .)
    STEP            reduce using rule 48 (array -> IDENT ( arrayItem ) .)


state 125

    (23) command -> DEF FN FN_DIM_NAME ( exprlist . ) = expr
    )               shift and go to state 133


state 126

    (30) command -> FOR IDENT = INTEGER TO . expr optstep
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 134
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 127

    (53) expr -> FUNCTIONS ( exprlist ) .
    NE              reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    =               reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    GE              reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    GT              reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    LE              reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    LT              reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    ^               reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    /               reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    *               reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    -               reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    +               reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    ;               reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    ,               reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    :               reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    INTEGER         reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    $end            reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    )               reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    THEN            reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)
    STEP            reduce using rule 53 (expr -> FUNCTIONS ( exprlist ) .)


state 128

    (69) exprlist -> expr _5_0x2c_expr_repeat .
    )               reduce using rule 69 (exprlist -> expr _5_0x2c_expr_repeat .)


state 129

    (70) _5_0x2c_expr_repeat -> _5_0x2c_expr_items .
    (72) _5_0x2c_expr_items -> _5_0x2c_expr_items . _5_0x2c_expr_item
    (74) _5_0x2c_expr_item -> . , expr
    )               reduce using rule 70 (_5_0x2c_expr_repeat -> _5_0x2c_expr_items .)
    ,               shift and go to state 131

    _5_0x2c_expr_item              shift and go to state 135

state 130

    (73) _5_0x2c_expr_items -> _5_0x2c_expr_item .
    ,               reduce using rule 73 (_5_0x2c_expr_items -> _5_0x2c_expr_item .)
    )               reduce using rule 73 (_5_0x2c_expr_items -> _5_0x2c_expr_item .)


state 131

    (74) _5_0x2c_expr_item -> , . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 136
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 132

    (47) array -> IDENT ( arrayItem , arrayItem . )
    )               shift and go to state 137


state 133

    (23) command -> DEF FN FN_DIM_NAME ( exprlist ) . = expr
    =               shift and go to state 138


state 134

    (30) command -> FOR IDENT = INTEGER TO expr . optstep
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (83) optstep -> . empty
    (84) optstep -> . STEP expr
    (85) empty -> .
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82
    STEP            shift and go to state 141
    :               reduce using rule 85 (empty -> .)
    INTEGER         reduce using rule 85 (empty -> .)
    $end            reduce using rule 85 (empty -> .)

    optstep                        shift and go to state 139
    empty                          shift and go to state 140

state 135

    (72) _5_0x2c_expr_items -> _5_0x2c_expr_items _5_0x2c_expr_item .
    ,               reduce using rule 72 (_5_0x2c_expr_items -> _5_0x2c_expr_items _5_0x2c_expr_item .)
    )               reduce using rule 72 (_5_0x2c_expr_items -> _5_0x2c_expr_items _5_0x2c_expr_item .)


state 136

    (74) _5_0x2c_expr_item -> , expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    ,               reduce using rule 74 (_5_0x2c_expr_item -> , expr .)
    )               reduce using rule 74 (_5_0x2c_expr_item -> , expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 137

    (47) array -> IDENT ( arrayItem , arrayItem ) .
    ,               reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    :               reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    INTEGER         reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    $end            reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    NE              reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    =               reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    GE              reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    GT              reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    LE              reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    LT              reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    ^               reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    /               reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    *               reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    -               reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    +               reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    ;               reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    )               reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    THEN            reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)
    STEP            reduce using rule 47 (array -> IDENT ( arrayItem , arrayItem ) .)


state 138

    (23) command -> DEF FN FN_DIM_NAME ( exprlist ) = . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 142
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 139

    (30) command -> FOR IDENT = INTEGER TO expr optstep .
    :               reduce using rule 30 (command -> FOR IDENT = INTEGER TO expr optstep .)
    INTEGER         reduce using rule 30 (command -> FOR IDENT = INTEGER TO expr optstep .)
    $end            reduce using rule 30 (command -> FOR IDENT = INTEGER TO expr optstep .)


state 140

    (83) optstep -> empty .
    :               reduce using rule 83 (optstep -> empty .)
    INTEGER         reduce using rule 83 (optstep -> empty .)
    $end            reduce using rule 83 (optstep -> empty .)


state 141

    (84) optstep -> STEP . expr
    (51) expr -> . - expr
    (52) expr -> . ( expr )
    (53) expr -> . FUNCTIONS ( exprlist )
    (54) expr -> . variable
    (55) expr -> . STRING
    (56) expr -> . FLOAT
    (57) expr -> . INTEGER
    (58) expr -> . expr ^ expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (37) variable -> . array
    (38) variable -> . IDENT
    (47) array -> . IDENT ( arrayItem , arrayItem )
    (48) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FUNCTIONS       shift and go to state 44
    STRING          shift and go to state 46
    FLOAT           shift and go to state 47
    INTEGER         shift and go to state 48
    IDENT           shift and go to state 50

    expr                           shift and go to state 143
    variable                       shift and go to state 45
    array                          shift and go to state 49

state 142

    (23) command -> DEF FN FN_DIM_NAME ( exprlist ) = expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    :               reduce using rule 23 (command -> DEF FN FN_DIM_NAME ( exprlist ) = expr .)
    INTEGER         reduce using rule 23 (command -> DEF FN FN_DIM_NAME ( exprlist ) = expr .)
    $end            reduce using rule 23 (command -> DEF FN FN_DIM_NAME ( exprlist ) = expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82


state 143

    (84) optstep -> STEP expr .
    (58) expr -> expr . ^ expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    :               reduce using rule 84 (optstep -> STEP expr .)
    INTEGER         reduce using rule 84 (optstep -> STEP expr .)
    $end            reduce using rule 84 (optstep -> STEP expr .)
    ^               shift and go to state 78
    /               shift and go to state 79
    *               shift and go to state 80
    -               shift and go to state 81
    +               shift and go to state 82
