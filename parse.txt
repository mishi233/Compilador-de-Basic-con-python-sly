Grammar:

Rule 0     S' -> program
Rule 1     program -> statement _1_statement_repeat
Rule 2     _1_statement_repeat -> _1_statement_items
Rule 3     _1_statement_repeat -> <empty>
Rule 4     _1_statement_items -> _1_statement_items _1_statement_item
Rule 5     _1_statement_items -> _1_statement_item
Rule 6     _1_statement_item -> statement
Rule 7     statement -> : command
Rule 8     statement -> INTEGER command
Rule 9     command -> DIM array _2_0x2c_array_repeat
Rule 10    _2_0x2c_array_repeat -> _2_0x2c_array_items
Rule 11    _2_0x2c_array_repeat -> <empty>
Rule 12    _2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item
Rule 13    _2_0x2c_array_items -> _2_0x2c_array_item
Rule 14    _2_0x2c_array_item -> , array
Rule 15    command -> READ varItem _3_0x2c_varItem_repeat
Rule 16    _3_0x2c_varItem_repeat -> _3_0x2c_varItem_items
Rule 17    _3_0x2c_varItem_repeat -> <empty>
Rule 18    _3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item
Rule 19    _3_0x2c_varItem_items -> _3_0x2c_varItem_item
Rule 20    _3_0x2c_varItem_item -> , varItem
Rule 21    command -> RETURN
Rule 22    command -> GOSUB INTEGER
Rule 23    command -> DEF FN FN_DIM_NAME ( exprlist ) = expr
Rule 24    command -> INPUT varlist
Rule 25    command -> RESTORE
Rule 26    command -> STOP
Rule 27    command -> REM
Rule 28    command -> END
Rule 29    command -> NEXT IDENT
Rule 30    command -> FOR IDENT = INTEGER TO expr optstep
Rule 31    command -> IF relexpr THEN command
Rule 32    command -> IF relexpr THEN expr
Rule 33    command -> GOTO INTEGER
Rule 34    command -> PRINT plist
Rule 35    command -> DATA plist
Rule 36    command -> LET array = expr
Rule 37    command -> LET variable = expr
Rule 38    variable -> array
Rule 39    variable -> IDENT
Rule 40    varlist -> IDENT _4_0x2c_IDENT_repeat
Rule 41    _4_0x2c_IDENT_repeat -> _4_0x2c_IDENT_items
Rule 42    _4_0x2c_IDENT_repeat -> <empty>
Rule 43    _4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item
Rule 44    _4_0x2c_IDENT_items -> _4_0x2c_IDENT_item
Rule 45    _4_0x2c_IDENT_item -> , IDENT
Rule 46    varItem -> IDENT
Rule 47    varItem -> array
Rule 48    array -> IDENT ( arrayItem , arrayItem )
Rule 49    array -> IDENT ( arrayItem )
Rule 50    arrayItem -> empty
Rule 51    arrayItem -> FLOAT
Rule 52    arrayItem -> INTEGER
Rule 53    arrayItem -> IDENT
Rule 54    expr -> - expr  [precedence=right, level=4]
Rule 55    expr -> ( expr )
Rule 56    expr -> FN_DIM_NAME ( exprlist )
Rule 57    expr -> FUNCTIONS ( exprlist )
Rule 58    expr -> variable
Rule 59    expr -> STRING
Rule 60    expr -> FLOAT
Rule 61    expr -> INTEGER
Rule 62    expr -> expr ^ expr  [precedence=left, level=3]
Rule 63    expr -> expr / expr  [precedence=left, level=2]
Rule 64    expr -> expr * expr  [precedence=left, level=2]
Rule 65    expr -> expr - expr  [precedence=left, level=1]
Rule 66    expr -> expr + expr  [precedence=left, level=1]
Rule 67    relexpr -> expr NE expr
Rule 68    relexpr -> expr = expr
Rule 69    relexpr -> expr GE expr
Rule 70    relexpr -> expr GT expr
Rule 71    relexpr -> expr LE expr
Rule 72    relexpr -> expr LT expr
Rule 73    exprlist -> expr _5_0x2c_expr_repeat
Rule 74    _5_0x2c_expr_repeat -> _5_0x2c_expr_items
Rule 75    _5_0x2c_expr_repeat -> <empty>
Rule 76    _5_0x2c_expr_items -> _5_0x2c_expr_items _5_0x2c_expr_item
Rule 77    _5_0x2c_expr_items -> _5_0x2c_expr_item
Rule 78    _5_0x2c_expr_item -> , expr
Rule 79    plist -> expr
Rule 80    plist -> expr _6_optend_expr_repeat
Rule 81    _6_optend_expr_repeat -> _6_optend_expr_items
Rule 82    _6_optend_expr_repeat -> <empty>
Rule 83    _6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item
Rule 84    _6_optend_expr_items -> _6_optend_expr_item
Rule 85    _6_optend_expr_item -> optend expr
Rule 86    optend -> ;
Rule 87    optend -> ,
Rule 88    optstep -> empty
Rule 89    optstep -> STEP expr
Rule 90    empty -> <empty>

Terminals, with rules where they appear:

(                    : 23 48 49 55 56 57
)                    : 23 48 49 55 56 57
*                    : 64
+                    : 66
,                    : 14 20 45 48 78 87
-                    : 54 65
/                    : 63
:                    : 7
;                    : 86
=                    : 23 30 36 37 68
DATA                 : 35
DEF                  : 23
DIM                  : 9
END                  : 28
FLOAT                : 51 60
FN                   : 23
FN_DIM_NAME          : 23 56
FOR                  : 30
FUNCTIONS            : 57
GE                   : 69
GOSUB                : 22
GOTO                 : 33
GT                   : 70
IDENT                : 29 30 39 40 45 46 48 49 53
IF                   : 31 32
INPUT                : 24
INTEGER              : 8 22 30 33 52 61
LE                   : 71
LET                  : 36 37
LT                   : 72
NE                   : 67
NEXT                 : 29
PRINT                : 34
READ                 : 15
REM                  : 27
RESTORE              : 25
RETURN               : 21
STEP                 : 89
STOP                 : 26
STRING               : 59
THEN                 : 31 32
TO                   : 30
^                    : 62
error                : 

Nonterminals, with rules where they appear:

_1_statement_item    : 4 5
_1_statement_items   : 2 4
_1_statement_repeat  : 1
_2_0x2c_array_item   : 12 13
_2_0x2c_array_items  : 10 12
_2_0x2c_array_repeat : 9
_3_0x2c_varItem_item : 18 19
_3_0x2c_varItem_items : 16 18
_3_0x2c_varItem_repeat : 15
_4_0x2c_IDENT_item   : 43 44
_4_0x2c_IDENT_items  : 41 43
_4_0x2c_IDENT_repeat : 40
_5_0x2c_expr_item    : 76 77
_5_0x2c_expr_items   : 74 76
_5_0x2c_expr_repeat  : 73
_6_optend_expr_item  : 83 84
_6_optend_expr_items : 81 83
_6_optend_expr_repeat : 80
array                : 9 14 36 38 47
arrayItem            : 48 48 49
command              : 7 8 31
empty                : 50 88
expr                 : 23 30 32 36 37 54 55 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 78 79 80 85 89
exprlist             : 23 56 57
optend               : 85
optstep              : 30
plist                : 34 35
program              : 0
relexpr              : 31 32
statement            : 1 6
varItem              : 15 20
variable             : 37 58
varlist              : 24


state 0

    (0) S' -> . program
    (1) program -> . statement _1_statement_repeat
    (7) statement -> . : command
    (8) statement -> . INTEGER command
    :               shift and go to state 3
    INTEGER         shift and go to state 4

    program                        shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> program .


state 2

    (1) program -> statement . _1_statement_repeat
    (2) _1_statement_repeat -> . _1_statement_items
    (3) _1_statement_repeat -> .
    (4) _1_statement_items -> . _1_statement_items _1_statement_item
    (5) _1_statement_items -> . _1_statement_item
    (6) _1_statement_item -> . statement
    (7) statement -> . : command
    (8) statement -> . INTEGER command
    $end            reduce using rule 3 (_1_statement_repeat -> .)
    :               shift and go to state 3
    INTEGER         shift and go to state 4

    statement                      shift and go to state 5
    _1_statement_repeat            shift and go to state 6
    _1_statement_items             shift and go to state 7
    _1_statement_item              shift and go to state 8

state 3

    (7) statement -> : . command
    (9) command -> . DIM array _2_0x2c_array_repeat
    (15) command -> . READ varItem _3_0x2c_varItem_repeat
    (21) command -> . RETURN
    (22) command -> . GOSUB INTEGER
    (23) command -> . DEF FN FN_DIM_NAME ( exprlist ) = expr
    (24) command -> . INPUT varlist
    (25) command -> . RESTORE
    (26) command -> . STOP
    (27) command -> . REM
    (28) command -> . END
    (29) command -> . NEXT IDENT
    (30) command -> . FOR IDENT = INTEGER TO expr optstep
    (31) command -> . IF relexpr THEN command
    (32) command -> . IF relexpr THEN expr
    (33) command -> . GOTO INTEGER
    (34) command -> . PRINT plist
    (35) command -> . DATA plist
    (36) command -> . LET array = expr
    (37) command -> . LET variable = expr
    DIM             shift and go to state 10
    READ            shift and go to state 11
    RETURN          shift and go to state 12
    GOSUB           shift and go to state 13
    DEF             shift and go to state 14
    INPUT           shift and go to state 15
    RESTORE         shift and go to state 16
    STOP            shift and go to state 17
    REM             shift and go to state 18
    END             shift and go to state 19
    NEXT            shift and go to state 20
    FOR             shift and go to state 21
    IF              shift and go to state 22
    GOTO            shift and go to state 23
    PRINT           shift and go to state 24
    DATA            shift and go to state 25
    LET             shift and go to state 26

    command                        shift and go to state 9

state 4

    (8) statement -> INTEGER . command
    (9) command -> . DIM array _2_0x2c_array_repeat
    (15) command -> . READ varItem _3_0x2c_varItem_repeat
    (21) command -> . RETURN
    (22) command -> . GOSUB INTEGER
    (23) command -> . DEF FN FN_DIM_NAME ( exprlist ) = expr
    (24) command -> . INPUT varlist
    (25) command -> . RESTORE
    (26) command -> . STOP
    (27) command -> . REM
    (28) command -> . END
    (29) command -> . NEXT IDENT
    (30) command -> . FOR IDENT = INTEGER TO expr optstep
    (31) command -> . IF relexpr THEN command
    (32) command -> . IF relexpr THEN expr
    (33) command -> . GOTO INTEGER
    (34) command -> . PRINT plist
    (35) command -> . DATA plist
    (36) command -> . LET array = expr
    (37) command -> . LET variable = expr
    DIM             shift and go to state 10
    READ            shift and go to state 11
    RETURN          shift and go to state 12
    GOSUB           shift and go to state 13
    DEF             shift and go to state 14
    INPUT           shift and go to state 15
    RESTORE         shift and go to state 16
    STOP            shift and go to state 17
    REM             shift and go to state 18
    END             shift and go to state 19
    NEXT            shift and go to state 20
    FOR             shift and go to state 21
    IF              shift and go to state 22
    GOTO            shift and go to state 23
    PRINT           shift and go to state 24
    DATA            shift and go to state 25
    LET             shift and go to state 26

    command                        shift and go to state 27

state 5

    (6) _1_statement_item -> statement .
    :               reduce using rule 6 (_1_statement_item -> statement .)
    INTEGER         reduce using rule 6 (_1_statement_item -> statement .)
    $end            reduce using rule 6 (_1_statement_item -> statement .)


state 6

    (1) program -> statement _1_statement_repeat .
    $end            reduce using rule 1 (program -> statement _1_statement_repeat .)


state 7

    (2) _1_statement_repeat -> _1_statement_items .
    (4) _1_statement_items -> _1_statement_items . _1_statement_item
    (6) _1_statement_item -> . statement
    (7) statement -> . : command
    (8) statement -> . INTEGER command
    $end            reduce using rule 2 (_1_statement_repeat -> _1_statement_items .)
    :               shift and go to state 3
    INTEGER         shift and go to state 4

    _1_statement_item              shift and go to state 28
    statement                      shift and go to state 5

state 8

    (5) _1_statement_items -> _1_statement_item .
    :               reduce using rule 5 (_1_statement_items -> _1_statement_item .)
    INTEGER         reduce using rule 5 (_1_statement_items -> _1_statement_item .)
    $end            reduce using rule 5 (_1_statement_items -> _1_statement_item .)


state 9

    (7) statement -> : command .
    :               reduce using rule 7 (statement -> : command .)
    INTEGER         reduce using rule 7 (statement -> : command .)
    $end            reduce using rule 7 (statement -> : command .)


state 10

    (9) command -> DIM . array _2_0x2c_array_repeat
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    IDENT           shift and go to state 30

    array                          shift and go to state 29

state 11

    (15) command -> READ . varItem _3_0x2c_varItem_repeat
    (46) varItem -> . IDENT
    (47) varItem -> . array
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    IDENT           shift and go to state 32

    varItem                        shift and go to state 31
    array                          shift and go to state 33

state 12

    (21) command -> RETURN .
    :               reduce using rule 21 (command -> RETURN .)
    INTEGER         reduce using rule 21 (command -> RETURN .)
    $end            reduce using rule 21 (command -> RETURN .)


state 13

    (22) command -> GOSUB . INTEGER
    INTEGER         shift and go to state 34


state 14

    (23) command -> DEF . FN FN_DIM_NAME ( exprlist ) = expr
    FN              shift and go to state 35


state 15

    (24) command -> INPUT . varlist
    (40) varlist -> . IDENT _4_0x2c_IDENT_repeat
    IDENT           shift and go to state 37

    varlist                        shift and go to state 36

state 16

    (25) command -> RESTORE .
    :               reduce using rule 25 (command -> RESTORE .)
    INTEGER         reduce using rule 25 (command -> RESTORE .)
    $end            reduce using rule 25 (command -> RESTORE .)


state 17

    (26) command -> STOP .
    :               reduce using rule 26 (command -> STOP .)
    INTEGER         reduce using rule 26 (command -> STOP .)
    $end            reduce using rule 26 (command -> STOP .)


state 18

    (27) command -> REM .
    :               reduce using rule 27 (command -> REM .)
    INTEGER         reduce using rule 27 (command -> REM .)
    $end            reduce using rule 27 (command -> REM .)


state 19

    (28) command -> END .
    :               reduce using rule 28 (command -> END .)
    INTEGER         reduce using rule 28 (command -> END .)
    $end            reduce using rule 28 (command -> END .)


state 20

    (29) command -> NEXT . IDENT
    IDENT           shift and go to state 38


state 21

    (30) command -> FOR . IDENT = INTEGER TO expr optstep
    IDENT           shift and go to state 39


state 22

    (31) command -> IF . relexpr THEN command
    (32) command -> IF . relexpr THEN expr
    (67) relexpr -> . expr NE expr
    (68) relexpr -> . expr = expr
    (69) relexpr -> . expr GE expr
    (70) relexpr -> . expr GT expr
    (71) relexpr -> . expr LE expr
    (72) relexpr -> . expr LT expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    relexpr                        shift and go to state 40
    expr                           shift and go to state 41
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 23

    (33) command -> GOTO . INTEGER
    INTEGER         shift and go to state 52


state 24

    (34) command -> PRINT . plist
    (79) plist -> . expr
    (80) plist -> . expr _6_optend_expr_repeat
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    plist                          shift and go to state 53
    expr                           shift and go to state 54
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 25

    (35) command -> DATA . plist
    (79) plist -> . expr
    (80) plist -> . expr _6_optend_expr_repeat
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    plist                          shift and go to state 55
    expr                           shift and go to state 54
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 26

    (36) command -> LET . array = expr
    (37) command -> LET . variable = expr
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    (38) variable -> . array
    (39) variable -> . IDENT
    IDENT           shift and go to state 58

    array                          shift and go to state 56
    variable                       shift and go to state 57

state 27

    (8) statement -> INTEGER command .
    :               reduce using rule 8 (statement -> INTEGER command .)
    INTEGER         reduce using rule 8 (statement -> INTEGER command .)
    $end            reduce using rule 8 (statement -> INTEGER command .)


state 28

    (4) _1_statement_items -> _1_statement_items _1_statement_item .
    :               reduce using rule 4 (_1_statement_items -> _1_statement_items _1_statement_item .)
    INTEGER         reduce using rule 4 (_1_statement_items -> _1_statement_items _1_statement_item .)
    $end            reduce using rule 4 (_1_statement_items -> _1_statement_items _1_statement_item .)


state 29

    (9) command -> DIM array . _2_0x2c_array_repeat
    (10) _2_0x2c_array_repeat -> . _2_0x2c_array_items
    (11) _2_0x2c_array_repeat -> .
    (12) _2_0x2c_array_items -> . _2_0x2c_array_items _2_0x2c_array_item
    (13) _2_0x2c_array_items -> . _2_0x2c_array_item
    (14) _2_0x2c_array_item -> . , array
    :               reduce using rule 11 (_2_0x2c_array_repeat -> .)
    INTEGER         reduce using rule 11 (_2_0x2c_array_repeat -> .)
    $end            reduce using rule 11 (_2_0x2c_array_repeat -> .)
    ,               shift and go to state 62

    _2_0x2c_array_repeat           shift and go to state 59
    _2_0x2c_array_items            shift and go to state 60
    _2_0x2c_array_item             shift and go to state 61

state 30

    (48) array -> IDENT . ( arrayItem , arrayItem )
    (49) array -> IDENT . ( arrayItem )
    (               shift and go to state 63


state 31

    (15) command -> READ varItem . _3_0x2c_varItem_repeat
    (16) _3_0x2c_varItem_repeat -> . _3_0x2c_varItem_items
    (17) _3_0x2c_varItem_repeat -> .
    (18) _3_0x2c_varItem_items -> . _3_0x2c_varItem_items _3_0x2c_varItem_item
    (19) _3_0x2c_varItem_items -> . _3_0x2c_varItem_item
    (20) _3_0x2c_varItem_item -> . , varItem
    :               reduce using rule 17 (_3_0x2c_varItem_repeat -> .)
    INTEGER         reduce using rule 17 (_3_0x2c_varItem_repeat -> .)
    $end            reduce using rule 17 (_3_0x2c_varItem_repeat -> .)
    ,               shift and go to state 67

    _3_0x2c_varItem_repeat         shift and go to state 64
    _3_0x2c_varItem_items          shift and go to state 65
    _3_0x2c_varItem_item           shift and go to state 66

state 32

    (46) varItem -> IDENT .
    (48) array -> IDENT . ( arrayItem , arrayItem )
    (49) array -> IDENT . ( arrayItem )
    ,               reduce using rule 46 (varItem -> IDENT .)
    :               reduce using rule 46 (varItem -> IDENT .)
    INTEGER         reduce using rule 46 (varItem -> IDENT .)
    $end            reduce using rule 46 (varItem -> IDENT .)
    (               shift and go to state 63


state 33

    (47) varItem -> array .
    ,               reduce using rule 47 (varItem -> array .)
    :               reduce using rule 47 (varItem -> array .)
    INTEGER         reduce using rule 47 (varItem -> array .)
    $end            reduce using rule 47 (varItem -> array .)


state 34

    (22) command -> GOSUB INTEGER .
    :               reduce using rule 22 (command -> GOSUB INTEGER .)
    INTEGER         reduce using rule 22 (command -> GOSUB INTEGER .)
    $end            reduce using rule 22 (command -> GOSUB INTEGER .)


state 35

    (23) command -> DEF FN . FN_DIM_NAME ( exprlist ) = expr
    FN_DIM_NAME     shift and go to state 68


state 36

    (24) command -> INPUT varlist .
    :               reduce using rule 24 (command -> INPUT varlist .)
    INTEGER         reduce using rule 24 (command -> INPUT varlist .)
    $end            reduce using rule 24 (command -> INPUT varlist .)


state 37

    (40) varlist -> IDENT . _4_0x2c_IDENT_repeat
    (41) _4_0x2c_IDENT_repeat -> . _4_0x2c_IDENT_items
    (42) _4_0x2c_IDENT_repeat -> .
    (43) _4_0x2c_IDENT_items -> . _4_0x2c_IDENT_items _4_0x2c_IDENT_item
    (44) _4_0x2c_IDENT_items -> . _4_0x2c_IDENT_item
    (45) _4_0x2c_IDENT_item -> . , IDENT
    :               reduce using rule 42 (_4_0x2c_IDENT_repeat -> .)
    INTEGER         reduce using rule 42 (_4_0x2c_IDENT_repeat -> .)
    $end            reduce using rule 42 (_4_0x2c_IDENT_repeat -> .)
    ,               shift and go to state 72

    _4_0x2c_IDENT_repeat           shift and go to state 69
    _4_0x2c_IDENT_items            shift and go to state 70
    _4_0x2c_IDENT_item             shift and go to state 71

state 38

    (29) command -> NEXT IDENT .
    :               reduce using rule 29 (command -> NEXT IDENT .)
    INTEGER         reduce using rule 29 (command -> NEXT IDENT .)
    $end            reduce using rule 29 (command -> NEXT IDENT .)


state 39

    (30) command -> FOR IDENT . = INTEGER TO expr optstep
    =               shift and go to state 73


state 40

    (31) command -> IF relexpr . THEN command
    (32) command -> IF relexpr . THEN expr
    THEN            shift and go to state 74


state 41

    (67) relexpr -> expr . NE expr
    (68) relexpr -> expr . = expr
    (69) relexpr -> expr . GE expr
    (70) relexpr -> expr . GT expr
    (71) relexpr -> expr . LE expr
    (72) relexpr -> expr . LT expr
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    NE              shift and go to state 75
    =               shift and go to state 76
    GE              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    LT              shift and go to state 80
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 42

    (54) expr -> - . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 86
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 43

    (55) expr -> ( . expr )
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 87
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 44

    (56) expr -> FN_DIM_NAME . ( exprlist )
    (               shift and go to state 88


state 45

    (57) expr -> FUNCTIONS . ( exprlist )
    (               shift and go to state 89


state 46

    (58) expr -> variable .
    NE              reduce using rule 58 (expr -> variable .)
    =               reduce using rule 58 (expr -> variable .)
    GE              reduce using rule 58 (expr -> variable .)
    GT              reduce using rule 58 (expr -> variable .)
    LE              reduce using rule 58 (expr -> variable .)
    LT              reduce using rule 58 (expr -> variable .)
    ^               reduce using rule 58 (expr -> variable .)
    /               reduce using rule 58 (expr -> variable .)
    *               reduce using rule 58 (expr -> variable .)
    -               reduce using rule 58 (expr -> variable .)
    +               reduce using rule 58 (expr -> variable .)
    ;               reduce using rule 58 (expr -> variable .)
    ,               reduce using rule 58 (expr -> variable .)
    :               reduce using rule 58 (expr -> variable .)
    INTEGER         reduce using rule 58 (expr -> variable .)
    $end            reduce using rule 58 (expr -> variable .)
    )               reduce using rule 58 (expr -> variable .)
    THEN            reduce using rule 58 (expr -> variable .)
    STEP            reduce using rule 58 (expr -> variable .)


state 47

    (59) expr -> STRING .
    NE              reduce using rule 59 (expr -> STRING .)
    =               reduce using rule 59 (expr -> STRING .)
    GE              reduce using rule 59 (expr -> STRING .)
    GT              reduce using rule 59 (expr -> STRING .)
    LE              reduce using rule 59 (expr -> STRING .)
    LT              reduce using rule 59 (expr -> STRING .)
    ^               reduce using rule 59 (expr -> STRING .)
    /               reduce using rule 59 (expr -> STRING .)
    *               reduce using rule 59 (expr -> STRING .)
    -               reduce using rule 59 (expr -> STRING .)
    +               reduce using rule 59 (expr -> STRING .)
    ;               reduce using rule 59 (expr -> STRING .)
    ,               reduce using rule 59 (expr -> STRING .)
    :               reduce using rule 59 (expr -> STRING .)
    INTEGER         reduce using rule 59 (expr -> STRING .)
    $end            reduce using rule 59 (expr -> STRING .)
    )               reduce using rule 59 (expr -> STRING .)
    THEN            reduce using rule 59 (expr -> STRING .)
    STEP            reduce using rule 59 (expr -> STRING .)


state 48

    (60) expr -> FLOAT .
    NE              reduce using rule 60 (expr -> FLOAT .)
    =               reduce using rule 60 (expr -> FLOAT .)
    GE              reduce using rule 60 (expr -> FLOAT .)
    GT              reduce using rule 60 (expr -> FLOAT .)
    LE              reduce using rule 60 (expr -> FLOAT .)
    LT              reduce using rule 60 (expr -> FLOAT .)
    ^               reduce using rule 60 (expr -> FLOAT .)
    /               reduce using rule 60 (expr -> FLOAT .)
    *               reduce using rule 60 (expr -> FLOAT .)
    -               reduce using rule 60 (expr -> FLOAT .)
    +               reduce using rule 60 (expr -> FLOAT .)
    ;               reduce using rule 60 (expr -> FLOAT .)
    ,               reduce using rule 60 (expr -> FLOAT .)
    :               reduce using rule 60 (expr -> FLOAT .)
    INTEGER         reduce using rule 60 (expr -> FLOAT .)
    $end            reduce using rule 60 (expr -> FLOAT .)
    )               reduce using rule 60 (expr -> FLOAT .)
    THEN            reduce using rule 60 (expr -> FLOAT .)
    STEP            reduce using rule 60 (expr -> FLOAT .)


state 49

    (61) expr -> INTEGER .
    NE              reduce using rule 61 (expr -> INTEGER .)
    =               reduce using rule 61 (expr -> INTEGER .)
    GE              reduce using rule 61 (expr -> INTEGER .)
    GT              reduce using rule 61 (expr -> INTEGER .)
    LE              reduce using rule 61 (expr -> INTEGER .)
    LT              reduce using rule 61 (expr -> INTEGER .)
    ^               reduce using rule 61 (expr -> INTEGER .)
    /               reduce using rule 61 (expr -> INTEGER .)
    *               reduce using rule 61 (expr -> INTEGER .)
    -               reduce using rule 61 (expr -> INTEGER .)
    +               reduce using rule 61 (expr -> INTEGER .)
    ;               reduce using rule 61 (expr -> INTEGER .)
    ,               reduce using rule 61 (expr -> INTEGER .)
    :               reduce using rule 61 (expr -> INTEGER .)
    INTEGER         reduce using rule 61 (expr -> INTEGER .)
    $end            reduce using rule 61 (expr -> INTEGER .)
    )               reduce using rule 61 (expr -> INTEGER .)
    THEN            reduce using rule 61 (expr -> INTEGER .)
    STEP            reduce using rule 61 (expr -> INTEGER .)


state 50

    (38) variable -> array .
    NE              reduce using rule 38 (variable -> array .)
    =               reduce using rule 38 (variable -> array .)
    GE              reduce using rule 38 (variable -> array .)
    GT              reduce using rule 38 (variable -> array .)
    LE              reduce using rule 38 (variable -> array .)
    LT              reduce using rule 38 (variable -> array .)
    ^               reduce using rule 38 (variable -> array .)
    /               reduce using rule 38 (variable -> array .)
    *               reduce using rule 38 (variable -> array .)
    -               reduce using rule 38 (variable -> array .)
    +               reduce using rule 38 (variable -> array .)
    ;               reduce using rule 38 (variable -> array .)
    ,               reduce using rule 38 (variable -> array .)
    :               reduce using rule 38 (variable -> array .)
    INTEGER         reduce using rule 38 (variable -> array .)
    $end            reduce using rule 38 (variable -> array .)
    )               reduce using rule 38 (variable -> array .)
    THEN            reduce using rule 38 (variable -> array .)
    STEP            reduce using rule 38 (variable -> array .)


state 51

    (39) variable -> IDENT .
    (48) array -> IDENT . ( arrayItem , arrayItem )
    (49) array -> IDENT . ( arrayItem )
    NE              reduce using rule 39 (variable -> IDENT .)
    =               reduce using rule 39 (variable -> IDENT .)
    GE              reduce using rule 39 (variable -> IDENT .)
    GT              reduce using rule 39 (variable -> IDENT .)
    LE              reduce using rule 39 (variable -> IDENT .)
    LT              reduce using rule 39 (variable -> IDENT .)
    ^               reduce using rule 39 (variable -> IDENT .)
    /               reduce using rule 39 (variable -> IDENT .)
    *               reduce using rule 39 (variable -> IDENT .)
    -               reduce using rule 39 (variable -> IDENT .)
    +               reduce using rule 39 (variable -> IDENT .)
    ;               reduce using rule 39 (variable -> IDENT .)
    ,               reduce using rule 39 (variable -> IDENT .)
    :               reduce using rule 39 (variable -> IDENT .)
    INTEGER         reduce using rule 39 (variable -> IDENT .)
    $end            reduce using rule 39 (variable -> IDENT .)
    )               reduce using rule 39 (variable -> IDENT .)
    THEN            reduce using rule 39 (variable -> IDENT .)
    STEP            reduce using rule 39 (variable -> IDENT .)
    (               shift and go to state 63


state 52

    (33) command -> GOTO INTEGER .
    :               reduce using rule 33 (command -> GOTO INTEGER .)
    INTEGER         reduce using rule 33 (command -> GOTO INTEGER .)
    $end            reduce using rule 33 (command -> GOTO INTEGER .)


state 53

    (34) command -> PRINT plist .
    :               reduce using rule 34 (command -> PRINT plist .)
    INTEGER         reduce using rule 34 (command -> PRINT plist .)
    $end            reduce using rule 34 (command -> PRINT plist .)


state 54

    (79) plist -> expr .
    (80) plist -> expr . _6_optend_expr_repeat
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    (81) _6_optend_expr_repeat -> . _6_optend_expr_items
    (82) _6_optend_expr_repeat -> .
    (83) _6_optend_expr_items -> . _6_optend_expr_items _6_optend_expr_item
    (84) _6_optend_expr_items -> . _6_optend_expr_item
    (85) _6_optend_expr_item -> . optend expr
    (86) optend -> . ;
    (87) optend -> . ,
  ! reduce/reduce conflict for : resolved using rule 79 (plist -> expr .)
  ! reduce/reduce conflict for INTEGER resolved using rule 79 (plist -> expr .)
  ! reduce/reduce conflict for $end resolved using rule 79 (plist -> expr .)
    :               reduce using rule 79 (plist -> expr .)
    INTEGER         reduce using rule 79 (plist -> expr .)
    $end            reduce using rule 79 (plist -> expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85
    ;               shift and go to state 94
    ,               shift and go to state 95

    _6_optend_expr_repeat          shift and go to state 90
    _6_optend_expr_items           shift and go to state 91
    _6_optend_expr_item            shift and go to state 92
    optend                         shift and go to state 93

state 55

    (35) command -> DATA plist .
    :               reduce using rule 35 (command -> DATA plist .)
    INTEGER         reduce using rule 35 (command -> DATA plist .)
    $end            reduce using rule 35 (command -> DATA plist .)


state 56

    (36) command -> LET array . = expr
    (38) variable -> array .
  ! shift/reduce conflict for = resolved as shift
    =               shift and go to state 96


state 57

    (37) command -> LET variable . = expr
    =               shift and go to state 97


state 58

    (48) array -> IDENT . ( arrayItem , arrayItem )
    (49) array -> IDENT . ( arrayItem )
    (39) variable -> IDENT .
    (               shift and go to state 63
    =               reduce using rule 39 (variable -> IDENT .)


state 59

    (9) command -> DIM array _2_0x2c_array_repeat .
    :               reduce using rule 9 (command -> DIM array _2_0x2c_array_repeat .)
    INTEGER         reduce using rule 9 (command -> DIM array _2_0x2c_array_repeat .)
    $end            reduce using rule 9 (command -> DIM array _2_0x2c_array_repeat .)


state 60

    (10) _2_0x2c_array_repeat -> _2_0x2c_array_items .
    (12) _2_0x2c_array_items -> _2_0x2c_array_items . _2_0x2c_array_item
    (14) _2_0x2c_array_item -> . , array
    :               reduce using rule 10 (_2_0x2c_array_repeat -> _2_0x2c_array_items .)
    INTEGER         reduce using rule 10 (_2_0x2c_array_repeat -> _2_0x2c_array_items .)
    $end            reduce using rule 10 (_2_0x2c_array_repeat -> _2_0x2c_array_items .)
    ,               shift and go to state 62

    _2_0x2c_array_item             shift and go to state 98

state 61

    (13) _2_0x2c_array_items -> _2_0x2c_array_item .
    ,               reduce using rule 13 (_2_0x2c_array_items -> _2_0x2c_array_item .)
    :               reduce using rule 13 (_2_0x2c_array_items -> _2_0x2c_array_item .)
    INTEGER         reduce using rule 13 (_2_0x2c_array_items -> _2_0x2c_array_item .)
    $end            reduce using rule 13 (_2_0x2c_array_items -> _2_0x2c_array_item .)


state 62

    (14) _2_0x2c_array_item -> , . array
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    IDENT           shift and go to state 30

    array                          shift and go to state 99

state 63

    (48) array -> IDENT ( . arrayItem , arrayItem )
    (49) array -> IDENT ( . arrayItem )
    (50) arrayItem -> . empty
    (51) arrayItem -> . FLOAT
    (52) arrayItem -> . INTEGER
    (53) arrayItem -> . IDENT
    (90) empty -> .
    FLOAT           shift and go to state 103
    INTEGER         shift and go to state 104
    IDENT           shift and go to state 100
    ,               reduce using rule 90 (empty -> .)
    )               reduce using rule 90 (empty -> .)

    arrayItem                      shift and go to state 101
    empty                          shift and go to state 102

state 64

    (15) command -> READ varItem _3_0x2c_varItem_repeat .
    :               reduce using rule 15 (command -> READ varItem _3_0x2c_varItem_repeat .)
    INTEGER         reduce using rule 15 (command -> READ varItem _3_0x2c_varItem_repeat .)
    $end            reduce using rule 15 (command -> READ varItem _3_0x2c_varItem_repeat .)


state 65

    (16) _3_0x2c_varItem_repeat -> _3_0x2c_varItem_items .
    (18) _3_0x2c_varItem_items -> _3_0x2c_varItem_items . _3_0x2c_varItem_item
    (20) _3_0x2c_varItem_item -> . , varItem
    :               reduce using rule 16 (_3_0x2c_varItem_repeat -> _3_0x2c_varItem_items .)
    INTEGER         reduce using rule 16 (_3_0x2c_varItem_repeat -> _3_0x2c_varItem_items .)
    $end            reduce using rule 16 (_3_0x2c_varItem_repeat -> _3_0x2c_varItem_items .)
    ,               shift and go to state 67

    _3_0x2c_varItem_item           shift and go to state 105

state 66

    (19) _3_0x2c_varItem_items -> _3_0x2c_varItem_item .
    ,               reduce using rule 19 (_3_0x2c_varItem_items -> _3_0x2c_varItem_item .)
    :               reduce using rule 19 (_3_0x2c_varItem_items -> _3_0x2c_varItem_item .)
    INTEGER         reduce using rule 19 (_3_0x2c_varItem_items -> _3_0x2c_varItem_item .)
    $end            reduce using rule 19 (_3_0x2c_varItem_items -> _3_0x2c_varItem_item .)


state 67

    (20) _3_0x2c_varItem_item -> , . varItem
    (46) varItem -> . IDENT
    (47) varItem -> . array
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    IDENT           shift and go to state 32

    varItem                        shift and go to state 106
    array                          shift and go to state 33

state 68

    (23) command -> DEF FN FN_DIM_NAME . ( exprlist ) = expr
    (               shift and go to state 107


state 69

    (40) varlist -> IDENT _4_0x2c_IDENT_repeat .
    :               reduce using rule 40 (varlist -> IDENT _4_0x2c_IDENT_repeat .)
    INTEGER         reduce using rule 40 (varlist -> IDENT _4_0x2c_IDENT_repeat .)
    $end            reduce using rule 40 (varlist -> IDENT _4_0x2c_IDENT_repeat .)


state 70

    (41) _4_0x2c_IDENT_repeat -> _4_0x2c_IDENT_items .
    (43) _4_0x2c_IDENT_items -> _4_0x2c_IDENT_items . _4_0x2c_IDENT_item
    (45) _4_0x2c_IDENT_item -> . , IDENT
    :               reduce using rule 41 (_4_0x2c_IDENT_repeat -> _4_0x2c_IDENT_items .)
    INTEGER         reduce using rule 41 (_4_0x2c_IDENT_repeat -> _4_0x2c_IDENT_items .)
    $end            reduce using rule 41 (_4_0x2c_IDENT_repeat -> _4_0x2c_IDENT_items .)
    ,               shift and go to state 72

    _4_0x2c_IDENT_item             shift and go to state 108

state 71

    (44) _4_0x2c_IDENT_items -> _4_0x2c_IDENT_item .
    ,               reduce using rule 44 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_item .)
    :               reduce using rule 44 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_item .)
    INTEGER         reduce using rule 44 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_item .)
    $end            reduce using rule 44 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_item .)


state 72

    (45) _4_0x2c_IDENT_item -> , . IDENT
    IDENT           shift and go to state 109


state 73

    (30) command -> FOR IDENT = . INTEGER TO expr optstep
    INTEGER         shift and go to state 110


state 74

    (31) command -> IF relexpr THEN . command
    (32) command -> IF relexpr THEN . expr
    (9) command -> . DIM array _2_0x2c_array_repeat
    (15) command -> . READ varItem _3_0x2c_varItem_repeat
    (21) command -> . RETURN
    (22) command -> . GOSUB INTEGER
    (23) command -> . DEF FN FN_DIM_NAME ( exprlist ) = expr
    (24) command -> . INPUT varlist
    (25) command -> . RESTORE
    (26) command -> . STOP
    (27) command -> . REM
    (28) command -> . END
    (29) command -> . NEXT IDENT
    (30) command -> . FOR IDENT = INTEGER TO expr optstep
    (31) command -> . IF relexpr THEN command
    (32) command -> . IF relexpr THEN expr
    (33) command -> . GOTO INTEGER
    (34) command -> . PRINT plist
    (35) command -> . DATA plist
    (36) command -> . LET array = expr
    (37) command -> . LET variable = expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    DIM             shift and go to state 10
    READ            shift and go to state 11
    RETURN          shift and go to state 12
    GOSUB           shift and go to state 13
    DEF             shift and go to state 14
    INPUT           shift and go to state 15
    RESTORE         shift and go to state 16
    STOP            shift and go to state 17
    REM             shift and go to state 18
    END             shift and go to state 19
    NEXT            shift and go to state 20
    FOR             shift and go to state 21
    IF              shift and go to state 22
    GOTO            shift and go to state 23
    PRINT           shift and go to state 24
    DATA            shift and go to state 25
    LET             shift and go to state 26
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    command                        shift and go to state 111
    expr                           shift and go to state 112
    array                          shift and go to state 50
    variable                       shift and go to state 46

state 75

    (67) relexpr -> expr NE . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 113
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 76

    (68) relexpr -> expr = . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 114
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 77

    (69) relexpr -> expr GE . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 115
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 78

    (70) relexpr -> expr GT . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 116
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 79

    (71) relexpr -> expr LE . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 117
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 80

    (72) relexpr -> expr LT . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 118
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 81

    (62) expr -> expr ^ . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 119
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 82

    (63) expr -> expr / . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 120
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 83

    (64) expr -> expr * . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 121
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 84

    (65) expr -> expr - . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 122
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 85

    (66) expr -> expr + . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 123
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 86

    (54) expr -> - expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    NE              reduce using rule 54 (expr -> - expr .)
    =               reduce using rule 54 (expr -> - expr .)
    GE              reduce using rule 54 (expr -> - expr .)
    GT              reduce using rule 54 (expr -> - expr .)
    LE              reduce using rule 54 (expr -> - expr .)
    LT              reduce using rule 54 (expr -> - expr .)
    ^               reduce using rule 54 (expr -> - expr .)
    /               reduce using rule 54 (expr -> - expr .)
    *               reduce using rule 54 (expr -> - expr .)
    -               reduce using rule 54 (expr -> - expr .)
    +               reduce using rule 54 (expr -> - expr .)
    ;               reduce using rule 54 (expr -> - expr .)
    ,               reduce using rule 54 (expr -> - expr .)
    :               reduce using rule 54 (expr -> - expr .)
    INTEGER         reduce using rule 54 (expr -> - expr .)
    $end            reduce using rule 54 (expr -> - expr .)
    )               reduce using rule 54 (expr -> - expr .)
    THEN            reduce using rule 54 (expr -> - expr .)
    STEP            reduce using rule 54 (expr -> - expr .)


state 87

    (55) expr -> ( expr . )
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    )               shift and go to state 124
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 88

    (56) expr -> FN_DIM_NAME ( . exprlist )
    (73) exprlist -> . expr _5_0x2c_expr_repeat
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    exprlist                       shift and go to state 125
    expr                           shift and go to state 126
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 89

    (57) expr -> FUNCTIONS ( . exprlist )
    (73) exprlist -> . expr _5_0x2c_expr_repeat
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    exprlist                       shift and go to state 127
    expr                           shift and go to state 126
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 90

    (80) plist -> expr _6_optend_expr_repeat .
    :               reduce using rule 80 (plist -> expr _6_optend_expr_repeat .)
    INTEGER         reduce using rule 80 (plist -> expr _6_optend_expr_repeat .)
    $end            reduce using rule 80 (plist -> expr _6_optend_expr_repeat .)


state 91

    (81) _6_optend_expr_repeat -> _6_optend_expr_items .
    (83) _6_optend_expr_items -> _6_optend_expr_items . _6_optend_expr_item
    (85) _6_optend_expr_item -> . optend expr
    (86) optend -> . ;
    (87) optend -> . ,
    :               reduce using rule 81 (_6_optend_expr_repeat -> _6_optend_expr_items .)
    INTEGER         reduce using rule 81 (_6_optend_expr_repeat -> _6_optend_expr_items .)
    $end            reduce using rule 81 (_6_optend_expr_repeat -> _6_optend_expr_items .)
    ;               shift and go to state 94
    ,               shift and go to state 95

    _6_optend_expr_item            shift and go to state 128
    optend                         shift and go to state 93

state 92

    (84) _6_optend_expr_items -> _6_optend_expr_item .
    ;               reduce using rule 84 (_6_optend_expr_items -> _6_optend_expr_item .)
    ,               reduce using rule 84 (_6_optend_expr_items -> _6_optend_expr_item .)
    :               reduce using rule 84 (_6_optend_expr_items -> _6_optend_expr_item .)
    INTEGER         reduce using rule 84 (_6_optend_expr_items -> _6_optend_expr_item .)
    $end            reduce using rule 84 (_6_optend_expr_items -> _6_optend_expr_item .)


state 93

    (85) _6_optend_expr_item -> optend . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 129
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 94

    (86) optend -> ; .
    -               reduce using rule 86 (optend -> ; .)
    (               reduce using rule 86 (optend -> ; .)
    FN_DIM_NAME     reduce using rule 86 (optend -> ; .)
    FUNCTIONS       reduce using rule 86 (optend -> ; .)
    STRING          reduce using rule 86 (optend -> ; .)
    FLOAT           reduce using rule 86 (optend -> ; .)
    INTEGER         reduce using rule 86 (optend -> ; .)
    IDENT           reduce using rule 86 (optend -> ; .)


state 95

    (87) optend -> , .
    -               reduce using rule 87 (optend -> , .)
    (               reduce using rule 87 (optend -> , .)
    FN_DIM_NAME     reduce using rule 87 (optend -> , .)
    FUNCTIONS       reduce using rule 87 (optend -> , .)
    STRING          reduce using rule 87 (optend -> , .)
    FLOAT           reduce using rule 87 (optend -> , .)
    INTEGER         reduce using rule 87 (optend -> , .)
    IDENT           reduce using rule 87 (optend -> , .)


state 96

    (36) command -> LET array = . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    array                          shift and go to state 50
    expr                           shift and go to state 130
    variable                       shift and go to state 46

state 97

    (37) command -> LET variable = . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    variable                       shift and go to state 46
    expr                           shift and go to state 131
    array                          shift and go to state 50

state 98

    (12) _2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item .
    ,               reduce using rule 12 (_2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item .)
    :               reduce using rule 12 (_2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item .)
    INTEGER         reduce using rule 12 (_2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item .)
    $end            reduce using rule 12 (_2_0x2c_array_items -> _2_0x2c_array_items _2_0x2c_array_item .)


state 99

    (14) _2_0x2c_array_item -> , array .
    ,               reduce using rule 14 (_2_0x2c_array_item -> , array .)
    :               reduce using rule 14 (_2_0x2c_array_item -> , array .)
    INTEGER         reduce using rule 14 (_2_0x2c_array_item -> , array .)
    $end            reduce using rule 14 (_2_0x2c_array_item -> , array .)


state 100

    (53) arrayItem -> IDENT .
    ,               reduce using rule 53 (arrayItem -> IDENT .)
    )               reduce using rule 53 (arrayItem -> IDENT .)


state 101

    (48) array -> IDENT ( arrayItem . , arrayItem )
    (49) array -> IDENT ( arrayItem . )
    ,               shift and go to state 132
    )               shift and go to state 133


state 102

    (50) arrayItem -> empty .
    ,               reduce using rule 50 (arrayItem -> empty .)
    )               reduce using rule 50 (arrayItem -> empty .)


state 103

    (51) arrayItem -> FLOAT .
    ,               reduce using rule 51 (arrayItem -> FLOAT .)
    )               reduce using rule 51 (arrayItem -> FLOAT .)


state 104

    (52) arrayItem -> INTEGER .
    ,               reduce using rule 52 (arrayItem -> INTEGER .)
    )               reduce using rule 52 (arrayItem -> INTEGER .)


state 105

    (18) _3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item .
    ,               reduce using rule 18 (_3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item .)
    :               reduce using rule 18 (_3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item .)
    INTEGER         reduce using rule 18 (_3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item .)
    $end            reduce using rule 18 (_3_0x2c_varItem_items -> _3_0x2c_varItem_items _3_0x2c_varItem_item .)


state 106

    (20) _3_0x2c_varItem_item -> , varItem .
    ,               reduce using rule 20 (_3_0x2c_varItem_item -> , varItem .)
    :               reduce using rule 20 (_3_0x2c_varItem_item -> , varItem .)
    INTEGER         reduce using rule 20 (_3_0x2c_varItem_item -> , varItem .)
    $end            reduce using rule 20 (_3_0x2c_varItem_item -> , varItem .)


state 107

    (23) command -> DEF FN FN_DIM_NAME ( . exprlist ) = expr
    (73) exprlist -> . expr _5_0x2c_expr_repeat
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    exprlist                       shift and go to state 134
    expr                           shift and go to state 126
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 108

    (43) _4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item .
    ,               reduce using rule 43 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item .)
    :               reduce using rule 43 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item .)
    INTEGER         reduce using rule 43 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item .)
    $end            reduce using rule 43 (_4_0x2c_IDENT_items -> _4_0x2c_IDENT_items _4_0x2c_IDENT_item .)


state 109

    (45) _4_0x2c_IDENT_item -> , IDENT .
    ,               reduce using rule 45 (_4_0x2c_IDENT_item -> , IDENT .)
    :               reduce using rule 45 (_4_0x2c_IDENT_item -> , IDENT .)
    INTEGER         reduce using rule 45 (_4_0x2c_IDENT_item -> , IDENT .)
    $end            reduce using rule 45 (_4_0x2c_IDENT_item -> , IDENT .)


state 110

    (30) command -> FOR IDENT = INTEGER . TO expr optstep
    TO              shift and go to state 135


state 111

    (31) command -> IF relexpr THEN command .
    :               reduce using rule 31 (command -> IF relexpr THEN command .)
    INTEGER         reduce using rule 31 (command -> IF relexpr THEN command .)
    $end            reduce using rule 31 (command -> IF relexpr THEN command .)


state 112

    (32) command -> IF relexpr THEN expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    :               reduce using rule 32 (command -> IF relexpr THEN expr .)
    INTEGER         reduce using rule 32 (command -> IF relexpr THEN expr .)
    $end            reduce using rule 32 (command -> IF relexpr THEN expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 113

    (67) relexpr -> expr NE expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    THEN            reduce using rule 67 (relexpr -> expr NE expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 114

    (68) relexpr -> expr = expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    THEN            reduce using rule 68 (relexpr -> expr = expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 115

    (69) relexpr -> expr GE expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    THEN            reduce using rule 69 (relexpr -> expr GE expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 116

    (70) relexpr -> expr GT expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    THEN            reduce using rule 70 (relexpr -> expr GT expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 117

    (71) relexpr -> expr LE expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    THEN            reduce using rule 71 (relexpr -> expr LE expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 118

    (72) relexpr -> expr LT expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    THEN            reduce using rule 72 (relexpr -> expr LT expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 119

    (62) expr -> expr ^ expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    NE              reduce using rule 62 (expr -> expr ^ expr .)
    =               reduce using rule 62 (expr -> expr ^ expr .)
    GE              reduce using rule 62 (expr -> expr ^ expr .)
    GT              reduce using rule 62 (expr -> expr ^ expr .)
    LE              reduce using rule 62 (expr -> expr ^ expr .)
    LT              reduce using rule 62 (expr -> expr ^ expr .)
    ^               reduce using rule 62 (expr -> expr ^ expr .)
    /               reduce using rule 62 (expr -> expr ^ expr .)
    *               reduce using rule 62 (expr -> expr ^ expr .)
    -               reduce using rule 62 (expr -> expr ^ expr .)
    +               reduce using rule 62 (expr -> expr ^ expr .)
    ;               reduce using rule 62 (expr -> expr ^ expr .)
    ,               reduce using rule 62 (expr -> expr ^ expr .)
    :               reduce using rule 62 (expr -> expr ^ expr .)
    INTEGER         reduce using rule 62 (expr -> expr ^ expr .)
    $end            reduce using rule 62 (expr -> expr ^ expr .)
    )               reduce using rule 62 (expr -> expr ^ expr .)
    THEN            reduce using rule 62 (expr -> expr ^ expr .)
    STEP            reduce using rule 62 (expr -> expr ^ expr .)


state 120

    (63) expr -> expr / expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    NE              reduce using rule 63 (expr -> expr / expr .)
    =               reduce using rule 63 (expr -> expr / expr .)
    GE              reduce using rule 63 (expr -> expr / expr .)
    GT              reduce using rule 63 (expr -> expr / expr .)
    LE              reduce using rule 63 (expr -> expr / expr .)
    LT              reduce using rule 63 (expr -> expr / expr .)
    /               reduce using rule 63 (expr -> expr / expr .)
    *               reduce using rule 63 (expr -> expr / expr .)
    -               reduce using rule 63 (expr -> expr / expr .)
    +               reduce using rule 63 (expr -> expr / expr .)
    ;               reduce using rule 63 (expr -> expr / expr .)
    ,               reduce using rule 63 (expr -> expr / expr .)
    :               reduce using rule 63 (expr -> expr / expr .)
    INTEGER         reduce using rule 63 (expr -> expr / expr .)
    $end            reduce using rule 63 (expr -> expr / expr .)
    )               reduce using rule 63 (expr -> expr / expr .)
    THEN            reduce using rule 63 (expr -> expr / expr .)
    STEP            reduce using rule 63 (expr -> expr / expr .)
    ^               shift and go to state 81


state 121

    (64) expr -> expr * expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    NE              reduce using rule 64 (expr -> expr * expr .)
    =               reduce using rule 64 (expr -> expr * expr .)
    GE              reduce using rule 64 (expr -> expr * expr .)
    GT              reduce using rule 64 (expr -> expr * expr .)
    LE              reduce using rule 64 (expr -> expr * expr .)
    LT              reduce using rule 64 (expr -> expr * expr .)
    /               reduce using rule 64 (expr -> expr * expr .)
    *               reduce using rule 64 (expr -> expr * expr .)
    -               reduce using rule 64 (expr -> expr * expr .)
    +               reduce using rule 64 (expr -> expr * expr .)
    ;               reduce using rule 64 (expr -> expr * expr .)
    ,               reduce using rule 64 (expr -> expr * expr .)
    :               reduce using rule 64 (expr -> expr * expr .)
    INTEGER         reduce using rule 64 (expr -> expr * expr .)
    $end            reduce using rule 64 (expr -> expr * expr .)
    )               reduce using rule 64 (expr -> expr * expr .)
    THEN            reduce using rule 64 (expr -> expr * expr .)
    STEP            reduce using rule 64 (expr -> expr * expr .)
    ^               shift and go to state 81


state 122

    (65) expr -> expr - expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    NE              reduce using rule 65 (expr -> expr - expr .)
    =               reduce using rule 65 (expr -> expr - expr .)
    GE              reduce using rule 65 (expr -> expr - expr .)
    GT              reduce using rule 65 (expr -> expr - expr .)
    LE              reduce using rule 65 (expr -> expr - expr .)
    LT              reduce using rule 65 (expr -> expr - expr .)
    -               reduce using rule 65 (expr -> expr - expr .)
    +               reduce using rule 65 (expr -> expr - expr .)
    ;               reduce using rule 65 (expr -> expr - expr .)
    ,               reduce using rule 65 (expr -> expr - expr .)
    :               reduce using rule 65 (expr -> expr - expr .)
    INTEGER         reduce using rule 65 (expr -> expr - expr .)
    $end            reduce using rule 65 (expr -> expr - expr .)
    )               reduce using rule 65 (expr -> expr - expr .)
    THEN            reduce using rule 65 (expr -> expr - expr .)
    STEP            reduce using rule 65 (expr -> expr - expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83


state 123

    (66) expr -> expr + expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    NE              reduce using rule 66 (expr -> expr + expr .)
    =               reduce using rule 66 (expr -> expr + expr .)
    GE              reduce using rule 66 (expr -> expr + expr .)
    GT              reduce using rule 66 (expr -> expr + expr .)
    LE              reduce using rule 66 (expr -> expr + expr .)
    LT              reduce using rule 66 (expr -> expr + expr .)
    -               reduce using rule 66 (expr -> expr + expr .)
    +               reduce using rule 66 (expr -> expr + expr .)
    ;               reduce using rule 66 (expr -> expr + expr .)
    ,               reduce using rule 66 (expr -> expr + expr .)
    :               reduce using rule 66 (expr -> expr + expr .)
    INTEGER         reduce using rule 66 (expr -> expr + expr .)
    $end            reduce using rule 66 (expr -> expr + expr .)
    )               reduce using rule 66 (expr -> expr + expr .)
    THEN            reduce using rule 66 (expr -> expr + expr .)
    STEP            reduce using rule 66 (expr -> expr + expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83


state 124

    (55) expr -> ( expr ) .
    NE              reduce using rule 55 (expr -> ( expr ) .)
    =               reduce using rule 55 (expr -> ( expr ) .)
    GE              reduce using rule 55 (expr -> ( expr ) .)
    GT              reduce using rule 55 (expr -> ( expr ) .)
    LE              reduce using rule 55 (expr -> ( expr ) .)
    LT              reduce using rule 55 (expr -> ( expr ) .)
    ^               reduce using rule 55 (expr -> ( expr ) .)
    /               reduce using rule 55 (expr -> ( expr ) .)
    *               reduce using rule 55 (expr -> ( expr ) .)
    -               reduce using rule 55 (expr -> ( expr ) .)
    +               reduce using rule 55 (expr -> ( expr ) .)
    ;               reduce using rule 55 (expr -> ( expr ) .)
    ,               reduce using rule 55 (expr -> ( expr ) .)
    :               reduce using rule 55 (expr -> ( expr ) .)
    INTEGER         reduce using rule 55 (expr -> ( expr ) .)
    $end            reduce using rule 55 (expr -> ( expr ) .)
    )               reduce using rule 55 (expr -> ( expr ) .)
    THEN            reduce using rule 55 (expr -> ( expr ) .)
    STEP            reduce using rule 55 (expr -> ( expr ) .)


state 125

    (56) expr -> FN_DIM_NAME ( exprlist . )
    )               shift and go to state 136


state 126

    (73) exprlist -> expr . _5_0x2c_expr_repeat
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    (74) _5_0x2c_expr_repeat -> . _5_0x2c_expr_items
    (75) _5_0x2c_expr_repeat -> .
    (76) _5_0x2c_expr_items -> . _5_0x2c_expr_items _5_0x2c_expr_item
    (77) _5_0x2c_expr_items -> . _5_0x2c_expr_item
    (78) _5_0x2c_expr_item -> . , expr
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85
    )               reduce using rule 75 (_5_0x2c_expr_repeat -> .)
    ,               shift and go to state 140

    _5_0x2c_expr_repeat            shift and go to state 137
    _5_0x2c_expr_items             shift and go to state 138
    _5_0x2c_expr_item              shift and go to state 139

state 127

    (57) expr -> FUNCTIONS ( exprlist . )
    )               shift and go to state 141


state 128

    (83) _6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .
    ;               reduce using rule 83 (_6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .)
    ,               reduce using rule 83 (_6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .)
    :               reduce using rule 83 (_6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .)
    INTEGER         reduce using rule 83 (_6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .)
    $end            reduce using rule 83 (_6_optend_expr_items -> _6_optend_expr_items _6_optend_expr_item .)


state 129

    (85) _6_optend_expr_item -> optend expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    ;               reduce using rule 85 (_6_optend_expr_item -> optend expr .)
    ,               reduce using rule 85 (_6_optend_expr_item -> optend expr .)
    :               reduce using rule 85 (_6_optend_expr_item -> optend expr .)
    INTEGER         reduce using rule 85 (_6_optend_expr_item -> optend expr .)
    $end            reduce using rule 85 (_6_optend_expr_item -> optend expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 130

    (36) command -> LET array = expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    :               reduce using rule 36 (command -> LET array = expr .)
    INTEGER         reduce using rule 36 (command -> LET array = expr .)
    $end            reduce using rule 36 (command -> LET array = expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 131

    (37) command -> LET variable = expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    :               reduce using rule 37 (command -> LET variable = expr .)
    INTEGER         reduce using rule 37 (command -> LET variable = expr .)
    $end            reduce using rule 37 (command -> LET variable = expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 132

    (48) array -> IDENT ( arrayItem , . arrayItem )
    (50) arrayItem -> . empty
    (51) arrayItem -> . FLOAT
    (52) arrayItem -> . INTEGER
    (53) arrayItem -> . IDENT
    (90) empty -> .
    FLOAT           shift and go to state 103
    INTEGER         shift and go to state 104
    IDENT           shift and go to state 100
    )               reduce using rule 90 (empty -> .)

    arrayItem                      shift and go to state 142
    empty                          shift and go to state 102

state 133

    (49) array -> IDENT ( arrayItem ) .
    ,               reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    :               reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    INTEGER         reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    $end            reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    NE              reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    =               reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    GE              reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    GT              reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    LE              reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    LT              reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    ^               reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    /               reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    *               reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    -               reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    +               reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    ;               reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    )               reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    THEN            reduce using rule 49 (array -> IDENT ( arrayItem ) .)
    STEP            reduce using rule 49 (array -> IDENT ( arrayItem ) .)


state 134

    (23) command -> DEF FN FN_DIM_NAME ( exprlist . ) = expr
    )               shift and go to state 143


state 135

    (30) command -> FOR IDENT = INTEGER TO . expr optstep
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 144
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 136

    (56) expr -> FN_DIM_NAME ( exprlist ) .
    NE              reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    =               reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    GE              reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    GT              reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    LE              reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    LT              reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    ^               reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    /               reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    *               reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    -               reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    +               reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    ;               reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    ,               reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    :               reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    INTEGER         reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    $end            reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    )               reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    THEN            reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)
    STEP            reduce using rule 56 (expr -> FN_DIM_NAME ( exprlist ) .)


state 137

    (73) exprlist -> expr _5_0x2c_expr_repeat .
    )               reduce using rule 73 (exprlist -> expr _5_0x2c_expr_repeat .)


state 138

    (74) _5_0x2c_expr_repeat -> _5_0x2c_expr_items .
    (76) _5_0x2c_expr_items -> _5_0x2c_expr_items . _5_0x2c_expr_item
    (78) _5_0x2c_expr_item -> . , expr
    )               reduce using rule 74 (_5_0x2c_expr_repeat -> _5_0x2c_expr_items .)
    ,               shift and go to state 140

    _5_0x2c_expr_item              shift and go to state 145

state 139

    (77) _5_0x2c_expr_items -> _5_0x2c_expr_item .
    ,               reduce using rule 77 (_5_0x2c_expr_items -> _5_0x2c_expr_item .)
    )               reduce using rule 77 (_5_0x2c_expr_items -> _5_0x2c_expr_item .)


state 140

    (78) _5_0x2c_expr_item -> , . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 146
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 141

    (57) expr -> FUNCTIONS ( exprlist ) .
    NE              reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    =               reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    GE              reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    GT              reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    LE              reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    LT              reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    ^               reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    /               reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    *               reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    -               reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    +               reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    ;               reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    ,               reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    :               reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    INTEGER         reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    $end            reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    )               reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    THEN            reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)
    STEP            reduce using rule 57 (expr -> FUNCTIONS ( exprlist ) .)


state 142

    (48) array -> IDENT ( arrayItem , arrayItem . )
    )               shift and go to state 147


state 143

    (23) command -> DEF FN FN_DIM_NAME ( exprlist ) . = expr
    =               shift and go to state 148


state 144

    (30) command -> FOR IDENT = INTEGER TO expr . optstep
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    (88) optstep -> . empty
    (89) optstep -> . STEP expr
    (90) empty -> .
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85
    STEP            shift and go to state 151
    :               reduce using rule 90 (empty -> .)
    INTEGER         reduce using rule 90 (empty -> .)
    $end            reduce using rule 90 (empty -> .)

    optstep                        shift and go to state 149
    empty                          shift and go to state 150

state 145

    (76) _5_0x2c_expr_items -> _5_0x2c_expr_items _5_0x2c_expr_item .
    ,               reduce using rule 76 (_5_0x2c_expr_items -> _5_0x2c_expr_items _5_0x2c_expr_item .)
    )               reduce using rule 76 (_5_0x2c_expr_items -> _5_0x2c_expr_items _5_0x2c_expr_item .)


state 146

    (78) _5_0x2c_expr_item -> , expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    ,               reduce using rule 78 (_5_0x2c_expr_item -> , expr .)
    )               reduce using rule 78 (_5_0x2c_expr_item -> , expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 147

    (48) array -> IDENT ( arrayItem , arrayItem ) .
    ,               reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    :               reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    INTEGER         reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    $end            reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    NE              reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    =               reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    GE              reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    GT              reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    LE              reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    LT              reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    ^               reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    /               reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    *               reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    -               reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    +               reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    ;               reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    )               reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    THEN            reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)
    STEP            reduce using rule 48 (array -> IDENT ( arrayItem , arrayItem ) .)


state 148

    (23) command -> DEF FN FN_DIM_NAME ( exprlist ) = . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 152
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 149

    (30) command -> FOR IDENT = INTEGER TO expr optstep .
    :               reduce using rule 30 (command -> FOR IDENT = INTEGER TO expr optstep .)
    INTEGER         reduce using rule 30 (command -> FOR IDENT = INTEGER TO expr optstep .)
    $end            reduce using rule 30 (command -> FOR IDENT = INTEGER TO expr optstep .)


state 150

    (88) optstep -> empty .
    :               reduce using rule 88 (optstep -> empty .)
    INTEGER         reduce using rule 88 (optstep -> empty .)
    $end            reduce using rule 88 (optstep -> empty .)


state 151

    (89) optstep -> STEP . expr
    (54) expr -> . - expr
    (55) expr -> . ( expr )
    (56) expr -> . FN_DIM_NAME ( exprlist )
    (57) expr -> . FUNCTIONS ( exprlist )
    (58) expr -> . variable
    (59) expr -> . STRING
    (60) expr -> . FLOAT
    (61) expr -> . INTEGER
    (62) expr -> . expr ^ expr
    (63) expr -> . expr / expr
    (64) expr -> . expr * expr
    (65) expr -> . expr - expr
    (66) expr -> . expr + expr
    (38) variable -> . array
    (39) variable -> . IDENT
    (48) array -> . IDENT ( arrayItem , arrayItem )
    (49) array -> . IDENT ( arrayItem )
    -               shift and go to state 42
    (               shift and go to state 43
    FN_DIM_NAME     shift and go to state 44
    FUNCTIONS       shift and go to state 45
    STRING          shift and go to state 47
    FLOAT           shift and go to state 48
    INTEGER         shift and go to state 49
    IDENT           shift and go to state 51

    expr                           shift and go to state 153
    variable                       shift and go to state 46
    array                          shift and go to state 50

state 152

    (23) command -> DEF FN FN_DIM_NAME ( exprlist ) = expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    :               reduce using rule 23 (command -> DEF FN FN_DIM_NAME ( exprlist ) = expr .)
    INTEGER         reduce using rule 23 (command -> DEF FN FN_DIM_NAME ( exprlist ) = expr .)
    $end            reduce using rule 23 (command -> DEF FN FN_DIM_NAME ( exprlist ) = expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


state 153

    (89) optstep -> STEP expr .
    (62) expr -> expr . ^ expr
    (63) expr -> expr . / expr
    (64) expr -> expr . * expr
    (65) expr -> expr . - expr
    (66) expr -> expr . + expr
    :               reduce using rule 89 (optstep -> STEP expr .)
    INTEGER         reduce using rule 89 (optstep -> STEP expr .)
    $end            reduce using rule 89 (optstep -> STEP expr .)
    ^               shift and go to state 81
    /               shift and go to state 82
    *               shift and go to state 83
    -               shift and go to state 84
    +               shift and go to state 85


Conflicts:

shift/reduce conflict for = in state 56 resolved as shift
reduce/reduce conflict in state 54 resolved using rule plist -> expr
rejected rule (_6_optend_expr_repeat -> <empty>) in state 54
Rule (_6_optend_expr_repeat -> <empty>) is never reduced